// Generated by CoffeeScript 1.7.1
var Bar, BarRender, Button, ButtonRender, ConfigCommand, CreateCommand, Dialog, DialogRender, Element, ErrorCommand, EventCommand, Form, FormRender, Group, GroupRender, HorizontalTitle, HorizontalTitleRender, HumanConfortableSizesAlgorithm, IconButton, IconButtonRender, InstanceManager, JustifyFieldsInBarAlgoritm, JustifyFieldsInLineAlgoritm, Line, LineRender, Margin, MarginRender, MessageManager, MessageRender, Page, PageRender, Pager, PagerRender, Password, PasswordRender, RenderizerAbstract, SenderAbstract, SpecificElementRender, TextField, TextFieldRender, VerticalMenu, config, jqueryda, messageManager, zRender,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

zRender = (function() {
  function zRender(render, sender) {
    this.render = render;
    this.sender = sender;
    if (!(typeof jQuery !== "undefined" && jQuery !== null)) {
      if (typeof console !== "undefined" && console !== null) {
        console.log('jQuery não está presente');
      }
    }
    render.parent = this;
    sender.parent = this;
    this._configureDefaults();
  }

  zRender.prototype._configureDefaults = function() {
    this.config = {};
    return this.config.jquerydaPath = '/js/jqueryda/';
  };

  zRender.prototype._parse = function(commands) {
    var command, elements, test;
    for (command in commands) {
      elements = commands[command];
      test = command * 1;
      if (isNaN(test)) {
        this.execute(command, elements);
      } else {
        this._parse(elements);
      }
    }
    return this;
  };

  zRender.prototype._configureHumanSizes = function() {
    return this.render.configureFontSizes();
  };

  zRender.prototype.execute = function(command, elements) {
    var executerName;
    executerName = command + 'Command';
    eval('var executerInstance = new ' + executerName + '(this)');
    return executerInstance.execute(elements);
  };

  zRender.prototype.start = function() {
    this._configureHumanSizes();
    if (commands) {
      return this._parse(commands);
    }
  };

  zRender.prototype.process = function(commands) {
    return this._parse(commands);
  };

  return zRender;

})();

$.fn.getClientRects = function(i) {
  return i = this.get(0).getClientRects()[0];
};

jqueryda = null;

config = null;

messageManager = null;

$(function() {
  jqueryda = new zRender(new Render(), new Sender());
  messageManager = new MessageManager(jqueryda);
  jqueryda.messageManager = messageManager;
  jqueryda.start();
  return config = jqueryda.config;
});

ConfigCommand = (function() {
  function ConfigCommand(parent) {
    this.parent = parent;
  }


  /*
  Recebe uma lista de variaveis/valor e adiciona na propriedade "global" de configuração
   */

  ConfigCommand.prototype.execute = function(config) {
    var property, value, _results;
    _results = [];
    for (property in config) {
      value = config[property];
      _results.push(this.parent.config[property] = value);
    }
    return _results;
  };

  return ConfigCommand;

})();

CreateCommand = (function() {
  function CreateCommand(parent) {
    this.parent = parent;
  }


  /*
  Recebe uma lista de elementos e os cria cada um segundo sua classe. 
  Após criar cada elemento os envia para o renderizador, que fará as conexões de paternidade
   */

  CreateCommand.prototype.execute = function(elements) {
    var attribs, element, render, self;
    for (element in elements) {
      attribs = elements[element];
      this.create(element, attribs);
    }
    render = this.parent.render;
    render.renderDependences();
    self = this;
    return $(window).load(function() {
      render.render();
      render.defineContainerWidths(this);
      render.defineContainerHeights(this);
      render.startElements();
      return setTimeout(function() {
        return self.linkEvents(elements);
      }, 0);
    });
  };

  CreateCommand.prototype.create = function(element, attribs) {
    var instance;
    instance = this.getInstance(attribs.type, attribs);
    if (!instance.name) {
      instance.name = element;
    }
    instance.id = element;
    this.parent.render.addElement(element, instance);
    return this.parent.render;
  };

  CreateCommand.prototype.getInstance = function(type, attribs) {
    eval('ret = new ' + type + '(attribs);');
    return ret;
  };

  CreateCommand.prototype.linkEvents = function(elements) {
    var render;
    render = this.parent.render;
    console.log('linkando com', render);
    return render.linkDefaulsInElements(elements);
  };

  return CreateCommand;

})();

ErrorCommand = (function() {
  function ErrorCommand(parent) {
    this.parent = parent;
  }


  /*
  Recebe uma lista de error e instruções de tratamento para exibir ao usuário
   */

  ErrorCommand.prototype.execute = function(elements) {
    return this.handler(elements);
  };

  ErrorCommand.prototype.handler = function(attribs) {
    console.log(attribs);
    return parent.messageManager.addMessage(attribs['msg'], attribs['logo'], attribs['type'], attribs['trace']);
  };

  return ErrorCommand;

})();

EventCommand = (function() {
  function EventCommand(parent) {
    this.parent = parent;
  }


  /*
  Recebe uma lista de error e instruções de tratamento para exibir ao usuário
   */

  EventCommand.prototype.execute = function(event) {
    var self;
    self = this;
    return $(window).load(function() {
      return self.parent.render.elements[event.element].bindEvent(self.parent.sender, event.event, event["do"], event.parent, event.send, event.server);
    });
  };

  return EventCommand;

})();

Element = (function() {
  var parentIfNotParent, type;

  type = 'element';

  parentIfNotParent = 'body';

  function Element(attribs) {
    var attrib, value, _ref;
    this.attribs = attribs;
    this.diferenca = 0;
    this.children = [];
    _ref = this.attribs;
    for (attrib in _ref) {
      value = _ref[attrib];
      this.setAttribute(attrib, value);
    }
  }

  Element.prototype.setAttribute = function(attrib, value) {
    eval('this.' + attrib + '= "' + value + '"');
    return this.attribs[attrib] = value;
  };

  Element.prototype.getAttribute = function(attrib) {
    return this.attribs[attrib];
  };

  Element.prototype.addElement = function(element) {
    this.children.push(element);
    return element.parent = this;
  };

  Element.prototype.isElement = function() {
    return true;
  };

  Element.prototype.isField = function() {
    return false;
  };

  Element.prototype.isContainer = function() {
    return false;
  };

  Element.prototype.renderAttribs = function(component) {
    var attrib, value, _ref, _results;
    if (this.id) {
      $(component).attr('id', this.id);
    } else {
      $(component).attr('id', this.name);
    }
    $(component).attr('name', this.name);
    _ref = this.attribs;
    _results = [];
    for (attrib in _ref) {
      value = _ref[attrib];
      if (attrib !== 'type' && attrib !== 'value' && attrib !== 'label' && attrib !== 'events') {
        _results.push($(component).attr(attrib, value));
      }
    }
    return _results;
  };

  Element.prototype.renderCustomAttribs = function(component) {};

  Element.prototype.render = function(parent, renderizer) {
    var child, _base, _i, _len, _ref;
    if (!parent) {
      if (this.parentIfNotParent) {
        parent = $(this.parentIfNotParent);
      } else {
        parent = 'body';
      }
    }
    this.component = renderizer.createElement(this);
    this.renderAttribs(this.component);
    this.renderCustomAttribs(this.component);
    _ref = this.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      child.render(this.component, renderizer);
    }
    if (this.value) {
      this.setValue(this.value);
    }
    return typeof (_base = $(parent)).append === "function" ? _base.append(this.component) : void 0;
  };

  Element.prototype.renderDependences = function(parent, renderizer) {
    var child, _i, _len, _ref, _results;
    _ref = this.children;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      _results.push(child.renderDependences(this.component, renderizer));
    }
    return _results;
  };

  Element.prototype.start = function(renderizer) {
    var child, _i, _len, _ref, _ref1, _ref2, _ref3;
    if ((_ref = this.specificRender) != null) {
      if (typeof _ref.beforeStartChildren === "function") {
        _ref.beforeStartChildren(this, renderizer);
      }
    }
    _ref1 = this.children;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      child = _ref1[_i];
      child.start(renderizer);
    }
    if ((_ref2 = this.specificRender) != null) {
      if (typeof _ref2.afterStartChildren === "function") {
        _ref2.afterStartChildren(this, renderizer);
      }
    }
    return (_ref3 = this.specificRender) != null ? typeof _ref3.startElement === "function" ? _ref3.startElement(this, renderizer) : void 0 : void 0;
  };

  Element.prototype.afterAllStart = function(renderizer) {
    var child, _i, _len, _ref, _ref1;
    _ref = this.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      child.afterAllStart(renderizer);
    }
    return (_ref1 = this.specificRender) != null ? _ref1.afterAllStart(this, renderizer) : void 0;
  };

  Element.prototype.realign = function(renderizer) {
    var child, _i, _len, _ref, _ref1, _ref2, _ref3;
    if ((_ref = this.specificRender) != null) {
      if (typeof _ref.beforeRealignChildren === "function") {
        _ref.beforeRealignChildren(this, renderizer);
      }
    }
    _ref1 = this.children;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      child = _ref1[_i];
      child.realign(renderizer);
    }
    if ((_ref2 = this.specificRender) != null) {
      if (typeof _ref2.afterRealignChildren === "function") {
        _ref2.afterRealignChildren(this, renderizer);
      }
    }
    return (_ref3 = this.specificRender) != null ? typeof _ref3.realignElement === "function" ? _ref3.realignElement(this, renderizer) : void 0 : void 0;
  };

  Element.prototype.afterAllRealign = function(renderizer) {
    var child, _i, _len, _ref, _ref1;
    _ref = this.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      child.afterAllRealign(renderizer);
    }
    return (_ref1 = this.specificRender) != null ? typeof _ref1.afterAllRealign === "function" ? _ref1.afterAllRealign(this, renderizer) : void 0 : void 0;
  };

  Element.prototype.setValue = function(value) {
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.setValue === 'function') {
        return this.specificRender.setValue(value);
      }
    }
    return $(this.component).val(value);
  };

  Element.prototype.getValue = function(value) {
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.getValue === 'function') {
        return this.specificRender.getValue();
      }
    }
    return $(this.component).val();
  };

  Element.prototype.setLabel = function(value) {
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.setLabel === 'function') {
        return this.specificRender.setLabel(value);
      }
    }
    return $(this.component).attr('label', value);
  };

  Element.prototype.getLabel = function(value) {
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.setLabel === 'function') {
        return this.specificRender.setLabel(value);
      }
    }
    return $(this.component).attr('label');
  };

  Element.prototype.getPointsForWidth = function(value) {
    var parentW;
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.getPointsForWidth === 'function') {
        return this.specificRender.getPointsForWidth(value);
      }
    }
    if ((typeof value.search === "function" ? value.search('%') : void 0) > -1) {
      parentW = this.getParent().getWidth();
      return Math.round(parentW * value.substr(0, value.length - 1) / 100);
    }
    return value;
  };

  Element.prototype.setWidth = function(value) {
    var e, real;
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.setWidth === 'function') {
        return this.specificRender.setWidth(value);
      }
    }
    console.log('setWidth', this.id, value);
    value = this.getPointsForWidth(value);
    if (this.maxWidth && value > this.maxWidth) {
      value = this.maxWidth;
    }
    $(this.component).css('width', value);
    try {
      real = this.getRealWidth();
      this.diferenca = real - value;
      return $(this.component).css('width', value - this.diferenca);
    } catch (_error) {
      e = _error;
    }
  };

  Element.prototype.getWidth = function() {
    var ret;
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.getWidth === 'function') {
        return this.specificRender.getWidth();
      }
    }
    ret = $(this.component).css('width');
    if (ret.substr(-2) === 'px') {
      ret = ret.substr(0, ret.length - 2);
    }
    return ret;
  };

  Element.prototype.incWidth = function(value) {
    return this.setWidth(this.getRealWidth() + value);
  };

  Element.prototype.decWidth = function(value) {
    return this.setWidth(this.getRealWidth() - value);
  };

  Element.prototype.incHeight = function(value) {
    return this.setHeight(this.getHeight() + value);
  };

  Element.prototype.decHeight = function(value) {
    return this.setHeight(this.getHeight() - value);
  };

  Element.prototype.resetWidth = function() {
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.resetWidth === 'function') {
        return this.specificRender.resetWidth();
      }
    }
    return $(this.component).css('width', 'initial');
  };

  Element.prototype.resetHeight = function() {
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.resetHeight === 'function') {
        return this.specificRender.resetHeight();
      }
    }
    return $(this.component).css('height', 'initial');
  };

  Element.prototype.getSize = function() {
    return this.size;
  };

  Element.prototype.setSize = function(size) {
    this.size = size;
    return this;
  };

  Element.prototype.getSizeInScreen = function() {
    if (this.sizeInScreen) {
      return this.sizeInScreen;
    }
    return this.getSize();
  };

  Element.prototype.setSizeInScreen = function(sizeInScreen) {
    this.sizeInScreen = sizeInScreen;
    return this;
  };

  Element.prototype.setHeight = function(value) {
    var diferenca, e, real;
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.setHeight === 'function') {
        return this.specificRender.setHeight(value);
      }
    }
    $(this.component).css('height', value);
    try {
      real = this.getHeight();
      diferenca = real - value;
      return $(this.component).css('height', value - diferenca);
    } catch (_error) {
      e = _error;
    }
  };

  Element.prototype.hidde = function() {
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.hidde === 'function') {
        return this.specificRender.hidde();
      }
    }
    return $(this.component).hidde();
  };

  Element.prototype.show = function() {
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.show === 'function') {
        return this.specificRender.show();
      }
    }
    return $(this.component).show();
  };

  Element.prototype.getPaddingRight = function() {
    var ret;
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.getPaddingRight === 'function') {
        return this.specificRender.getPaddingRight();
      }
    }
    ret = $(this.component).css('padding-right');
    return ret.substr(0, ret.lenght - 2) * 1;
  };

  Element.prototype.getPaddingLeft = function() {
    var ret;
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.getPaddingLeft === 'function') {
        return this.specificRender.getPaddingLeft();
      }
    }
    ret = $(this.component).css('padding-left');
    return ret.substr(0, ret.lenght - 2) * 1;
  };

  Element.prototype.getRight = function() {
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.getRight === 'function') {
        return this.specificRender.getRight();
      }
    }
    return $(this.component).getClientRects()['right'];
  };

  Element.prototype.getMaxRigth = function() {
    if (this.maxRigth) {
      return this.$maxRigth();
    }
    return parent.getMaxRigth();
  };

  Element.prototype.getClientRecOrZero = function(key) {
    var rect;
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.getClientRecOrZero === 'function') {
        return this.specificRender.getClientRecOrZero(key);
      }
    }
    rect = $(this.component).getClientRects();
    if (rect && rect[key]) {
      return rect[key];
    }
    return 0;
  };

  Element.prototype.getTop = function() {
    return this.getClientRecOrZero('top');
  };

  Element.prototype.getBottom = function() {
    return this.getClientRecOrZero('bottom');
  };

  Element.prototype.getHeight = function() {
    return this.getClientRecOrZero('height');
  };

  Element.prototype.getLeft = function() {
    return this.getClientRecOrZero('left');
  };

  Element.prototype.getRealWidth = function() {
    var e;
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.getRealWidth === 'function') {
        return this.specificRender.getRealWidth();
      }
    }
    try {
      return $(this.component).getClientRects()['width'];
    } catch (_error) {
      e = _error;
      return $(this.component).width();
    }
  };

  Element.prototype.getExtraWidth = function() {
    return this.diferenca;
  };

  Element.prototype.getParent = function() {
    if ((this.parent != null)) {
      return this.parent;
    }
    return null;
  };

  Element.prototype.getHumanConfortLimit = function() {
    var diff, _ref;
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.getHumanConfortLimit === 'function') {
        return this.specificRender.getHumanConfortLimit();
      }
    }
    if (this.size && this.size <= 5) {
      diff = 0.3;
    } else if (this.size && this.size <= 5) {
      diff = 0.2;
    } else if (this.size && this.size > 30) {
      diff = -0.2;
    } else {
      diff = 0;
    }
    if ((this.humanConfortLimit != null)) {
      return this.humanConfortLimit + diff;
    }
    return ((_ref = this.getParent()) != null ? _ref.getHumanConfortLimit() : void 0) + diff;
  };

  Element.prototype.getHumanConfort = function() {
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.getHumanConfort === 'function') {
        return this.specificRender.getHumanConfort();
      }
    }
    return this.getRealWidth() / this.getSize();
  };

  Element.prototype.ajustHumanConfortWidth = function(sizeScreen) {
    var newSize;
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.ajustHumanConfortWidth === 'function') {
        return this.specificRender.ajustHumanConfortWidth(sizeScreen);
      }
    }
    newSize = this.getHumanConfortLimit() * this.getSize();
    if (sizeScreen && newSize > sizeScreen) {
      newSize = sizeScreen;
    }
    return this.setWidth(newSize);
  };

  Element.prototype.getSameRightElement = function(first) {
    var element;
    if (first == null) {
      first = null;
    }
    if (this.sameRight) {
      if (!first) {
        first = this.sameRight;
      }
      element = $('#' + this.sameRight).element();
      if (element.sameRight) {
        if (element.sameRight !== first) {
          return element.getSameRightElement(first);
        }
      }
      return element;
    }
    return null;
  };

  Element.prototype.equalizeRects = function() {
    if (typeof this.specificRender !== 'undefined') {
      if (typeof this.specificRender.equalizeRects === 'function') {
        return this.specificRender.equalizeRects(sizeScreen);
      }
    }
  };

  Element.prototype.setInternalWidth = function(internalWidth) {
    this.internalWidth = internalWidth;
  };

  Element.prototype.getInternalWidth = function() {
    return this.internalWidth;
  };

  Element.prototype.bindEvent = function(sender, eventName, functionName, container, sendList, serverEvent) {
    return this.specificRender.bindEvent(sender, this, eventName, functionName, container, sendList, serverEvent);
  };

  return Element;

})();

Button = (function(_super) {
  __extends(Button, _super);

  function Button() {
    return Button.__super__.constructor.apply(this, arguments);
  }

  Button.prototype.setValue = function(value) {
    return $(this.obj_field).val(value);
  };

  Button.prototype.getValue = function(value) {
    return $(this.obj_field).val();
  };

  Button.prototype.setLabel = function(value) {
    return $(this.obj_field).val(value);
  };

  Button.prototype.getLabel = function(value) {
    return $(this.obj_field).val();
  };

  return Button;

})(Element);

IconButton = (function(_super) {
  __extends(IconButton, _super);

  function IconButton() {
    return IconButton.__super__.constructor.apply(this, arguments);
  }

  IconButton.prototype.setValue = function(value) {
    return $(this.obj_field).val(value);
  };

  IconButton.prototype.getValue = function(value) {
    return $(this.obj_field).val();
  };

  IconButton.prototype.setLabel = function(value) {
    return $(this.obj_field).val(value);
  };

  IconButton.prototype.getLabel = function(value) {
    return $(this.obj_field).val();
  };

  IconButton.prototype.setIcon = function(value) {
    return $(this.obj_field).val(value);
  };

  IconButton.prototype.getIcon = function(value) {
    return $(this.obj_field).val();
  };

  return IconButton;

})(Element);

TextField = (function(_super) {
  __extends(TextField, _super);

  function TextField(attribs) {
    this.attribs = attribs;
    TextField.__super__.constructor.call(this, this.attribs);
    if (!this.humanConfortLimit) {
      if (this.size > 250) {
        this.humanConfortLimit = 1;
      } else if (this.size > 200) {
        this.humanConfortLimit = 1.5;
      } else if (this.size > 150) {
        this.humanConfortLimit = 2.5;
      } else if (this.size > 100) {
        this.humanConfortLimit = 3.1;
      } else if (this.size > 80) {
        this.humanConfortLimit = 6.1;
      } else {
        this.humanConfortLimit = 6.1;
      }
    }
  }

  TextField.prototype.setValue = function(value) {
    return $(this.obj_field).val(value);
  };

  TextField.prototype.getValue = function(value) {
    return $(this.obj_field).val();
  };

  TextField.prototype.setLabel = function(value) {
    return $(this.obj_label).html(value);
  };

  TextField.prototype.getLabel = function(value) {
    return $(this.obj_label).html();
  };

  TextField.prototype.setWidth = function(value) {
    var e, real;
    value = this.getPointsForWidth(value);
    if (this.maxWidth && value > this.maxWidth) {
      value = this.maxWidth;
    }
    $(this.obj_field).css('width', value);
    try {
      real = this.getRealWidth();
      this.diferenca = real - value;
      $(this.obj_field).css('width', value - this.diferenca);
    } catch (_error) {
      e = _error;
      console.log(e);
    }
    try {
      real = this.getRealWidth();
      return this.diferenca = real - value;
    } catch (_error) {
      e = _error;
      return console.log('2', e);
    }
  };

  TextField.prototype.setHeight = function(value) {
    return $(this.obj_field).css('height', value);
  };

  TextField.prototype.getRealWidth = function() {
    return $(this.obj_field).getClientRects()['width'];
  };

  TextField.prototype.getHumanConfort = function() {
    return this.getRealWidth() / this.getSize();
  };

  TextField.prototype.equalizeRects = function() {
    var fieldw, labelw;
    fieldw = $(this.obj_field).getClientRects()['width'];
    labelw = $(this.obj_label).getClientRects()['width'];
    if (labelw > fieldw) {
      return this.setWidth(labelw);
    }
  };

  return TextField;

})(Element);

Password = (function(_super) {
  __extends(Password, _super);

  function Password(attribs) {
    this.attribs = attribs;
    Password.__super__.constructor.call(this, this.attribs);
  }

  return Password;

})(TextField);

Form = (function(_super) {
  __extends(Form, _super);

  function Form(attribs) {
    this.attribs = attribs;
    this.humanConfortLimit = 8.1;
    Form.__super__.constructor.call(this, this.attribs);
    this.lineRenders = [];
    this.barRenders = [];
    this.groupRenders = [];
    this.pagerRenders = [];
  }

  Form.prototype.isElement = function() {
    return true;
  };

  Form.prototype.isField = function() {
    return false;
  };

  Form.prototype.isContainer = function() {
    return true;
  };

  Form.prototype.getContainerStyle = function() {
    return 'Bar';
  };

  Form.prototype.addLineRender = function(lineRender) {
    return this.lineRenders.push(lineRender);
  };

  Form.prototype.getLineRenders = function() {
    return this.lineRenders;
  };

  Form.prototype.addBarRender = function(barRender) {
    return this.barRenders.push(barRender);
  };

  Form.prototype.getBarRenders = function() {
    return this.barRenders;
  };

  Form.prototype.addGroupRender = function(groupRender) {
    return this.groupRenders.push(groupRender);
  };

  Form.prototype.getGroupRenders = function() {
    return this.groupRenders;
  };

  Form.prototype.addPagerRender = function(pagerRender) {
    return this.pagerRenders.push(pagerRender);
  };

  Form.prototype.getPagerRenders = function() {
    return this.pagerRenders;
  };

  Form.prototype.getInternalWidth = function() {
    return this.getRight();
  };

  Form.prototype.getPointsForWidth = function(value) {
    var parentW;
    if (this.type !== 'Form') {
      return Form.__super__.getPointsForWidth.call(this, value);
    }
    if ((typeof value.search === "function" ? value.search('%') : void 0) > -1) {
      console.log(value);
      parentW = this.getRealWidth();
      if (this.firstSize) {
        parentW = this.firstSize;
      }
      this.firstSize = parentW;
      return Math.round(parentW * value.substr(0, value.length - 1) / 100);
    }
    return value;
  };

  Form.prototype.getSize = function() {
    if (this.size) {
      return this.size;
    }
    return this._getMaxChildrenSize();
  };

  Form.prototype._getMaxChildrenSize = function() {
    var bar, bars, child, line, lines, maxSize, size, _i, _j, _k, _len, _len1, _len2, _ref;
    lines = this.getLineRenders();
    if (lines.length > 0) {
      maxSize = 0;
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        size = line.element.getSizeInScreen() * 1;
        if (size > maxSize) {
          maxSize = size;
        }
      }
      return maxSize;
    }
    bars = this.getBarRenders();
    if (bars.length > 0) {
      maxSize = 0;
      for (_j = 0, _len1 = bars.length; _j < _len1; _j++) {
        bar = bars[_j];
        size = bar.element.getSizeInScreen() * 1;
        if (size > maxSize) {
          maxSize = size;
        }
      }
      return maxSize;
    }
    maxSize = 0;
    _ref = this.children;
    for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
      child = _ref[_k];
      maxSize += child.getSizeInScreen() * 1;
    }
    return maxSize;
  };

  Form.prototype.getUsedHeight = function() {
    var firstChild, lastChild, maxBottom, maxTop, usedHeight;
    if (this.children.length === 0) {
      return 0;
    }
    firstChild = this.children[0];
    lastChild = this.children[this.children.length - 1];
    if (firstChild.getBottom() > lastChild.getBottom()) {
      maxBottom = firstChild.getBottom();
    } else {
      maxBottom = lastChild.getBottom();
    }
    if (firstChild.getTop() > lastChild.getTop()) {
      maxTop = firstChild.getTop();
    } else {
      maxTop = lastChild.getTop();
    }
    return usedHeight = maxBottom - maxTop;
  };

  Form.prototype.getMaxBottom = function() {
    var firstChild, lastChild, maxBottom;
    firstChild = this.children[0];
    lastChild = this.children[this.children.length - 1];
    if (firstChild.getBottom() > lastChild.getBottom()) {
      maxBottom = firstChild.getBottom();
    } else {
      maxBottom = lastChild.getBottom();
    }
    return maxBottom;
  };

  Form.prototype.getVerticalPadding = function() {
    return 15;
  };

  return Form;

})(Element);

Bar = (function(_super) {
  __extends(Bar, _super);

  function Bar() {
    return Bar.__super__.constructor.apply(this, arguments);
  }

  Bar.prototype.getContainerStyle = function() {
    return 'Bar';
  };

  Bar.prototype._getMaxChildrenSize = function() {
    var child, maxSize, size, _i, _len, _ref;
    maxSize = 0;
    _ref = this.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      size = child.getSizeInScreen() * 1;
      if (size > maxSize) {
        maxSize = size;
      }
    }
    return maxSize;
  };

  return Bar;

})(Form);

Dialog = (function(_super) {
  __extends(Dialog, _super);

  function Dialog(attribs) {
    this.attribs = attribs;
    Dialog.__super__.constructor.call(this, this.attribs);
  }

  Dialog.prototype.setLabel = function(value) {
    return $(this.obj_label).html(value);
  };

  Dialog.prototype.getLabel = function(value) {
    return $(this.obj_label).html();
  };

  Dialog.prototype.getPointsForWidth = function(value) {
    return value;
  };

  Dialog.prototype.getInternalWidth = function() {
    return this.getRealWidth();
  };

  Dialog.prototype.start = function(renderizer) {
    var _ref;
    if ((_ref = this.specificRender) != null) {
      _ref.beforeStartChildren(this, renderizer);
    }
    return Dialog.__super__.start.call(this, renderizer);
  };

  Dialog.prototype.open = function(renderizer) {
    var _ref;
    return (_ref = this.specificRender) != null ? _ref.open(this, renderizer) : void 0;
  };

  Dialog.prototype.close = function(renderizer) {
    var _ref;
    return (_ref = this.specificRender) != null ? _ref.close(this, renderizer) : void 0;
  };

  Dialog.prototype.onClose = function(renderizer, event, ui) {};

  Dialog.prototype.onOpen = function(renderizer, event, ui) {};

  return Dialog;

})(Form);

Group = (function(_super) {
  __extends(Group, _super);

  function Group(attribs) {
    this.attribs = attribs;
    Group.__super__.constructor.call(this, this.attribs);
  }

  Group.prototype.setLabel = function(value) {
    return $(this.obj_label).html(value);
  };

  Group.prototype.getLabel = function(value) {
    return $(this.obj_label).html();
  };

  Group.prototype.getPointsForWidth = function(value) {
    var parentW;
    if ((typeof value.search === "function" ? value.search('%') : void 0) > -1) {
      parentW = this.getParent().getWidth();
      return Math.round(parentW * value.substr(0, value.length - 1) / 100);
    }
    return value;
  };

  Group.prototype.getInternalWidth = function() {
    return this.getRealWidth();
  };

  Group.prototype.start = function(renderizer) {
    var _ref;
    if ((_ref = this.specificRender) != null) {
      _ref.beforeStartChildren(this, renderizer);
    }
    return Group.__super__.start.call(this, renderizer);
  };

  return Group;

})(Form);

Line = (function(_super) {
  __extends(Line, _super);

  function Line() {
    return Line.__super__.constructor.apply(this, arguments);
  }

  Line.prototype.getContainerStyle = function() {
    return 'Line';
  };

  return Line;

})(Form);

Page = (function(_super) {
  __extends(Page, _super);

  function Page(attribs) {
    this.attribs = attribs;
    Page.__super__.constructor.call(this, this.attribs);
  }

  Page.prototype.setLabel = function(value) {
    return $(this.obj_label).html(value);
  };

  Page.prototype.getLabel = function(value) {
    return $(this.obj_label).html();
  };

  Page.prototype.start = function(renderizer) {
    var _ref;
    if ((_ref = this.specificRender) != null) {
      _ref.beforeStartChildren(this, renderizer);
    }
    return Page.__super__.start.call(this, renderizer);
  };

  Page.prototype.resetHeight = function() {
    $(this.component).css('height', 'auto');
    return console.log('Page resetada');
  };

  return Page;

})(Form);

Pager = (function(_super) {
  __extends(Pager, _super);

  function Pager(attribs) {
    this.attribs = attribs;
    Pager.__super__.constructor.call(this, this.attribs);
    if (!this.style) {
      this.style = 'horizontal';
    }
  }

  Pager.prototype.start = function(renderizer) {
    var _ref;
    if ((_ref = this.specificRender) != null) {
      _ref.beforeStartChildren(this, renderizer);
    }
    return Pager.__super__.start.call(this, renderizer);
  };

  Pager.prototype.getContainerStyle = function() {
    return 'Page';
  };

  Pager.prototype.setHeigth = function(height) {
    var page, _i, _len, _ref;
    _ref = this.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      page = _ref[_i];
      page.setHeight(height);
    }
    return Pager.__super__.setHeigth.call(this, height);
  };

  Pager.prototype.resetHeight = function() {
    var page, _i, _len, _ref;
    $(this.component).css('height', 'auto');
    _ref = this.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      page = _ref[_i];
      page.resetHeight();
    }
    return console.log('Pager resetada');
  };

  return Pager;

})(Form);

Margin = (function(_super) {
  __extends(Margin, _super);

  function Margin() {
    return Margin.__super__.constructor.apply(this, arguments);
  }

  return Margin;

})(Element);

VerticalMenu = (function(_super) {
  __extends(VerticalMenu, _super);

  function VerticalMenu() {
    return VerticalMenu.__super__.constructor.apply(this, arguments);
  }

  return VerticalMenu;

})(Element);

HorizontalTitle = (function(_super) {
  __extends(HorizontalTitle, _super);

  function HorizontalTitle() {
    return HorizontalTitle.__super__.constructor.apply(this, arguments);
  }

  HorizontalTitle.prototype.createComponent = function(renderizer) {
    var ret;
    return ret = renderizer.createElement(this);
  };

  HorizontalTitle.prototype.setValue = function(value) {
    return $(this.component).html(value);
  };

  return HorizontalTitle;

})(Element);

MessageManager = (function() {
  function MessageManager(parent) {
    this.parent = parent;
    this.renderElements();
  }

  MessageManager.prototype.renderElements = function() {
    this.create = new CreateCommand(this.parent);
    this.renderizer = this.create.create('D1', {
      name: 'D1',
      type: 'Dialog',
      width: '50%'
    });
    this.create.create('D1txt', {
      id: 'D1txt',
      name: 'D1txt',
      type: 'Line',
      parent: 'D1'
    });
    this.renderizer.renderOne('D1');
    return this.renderizer.startElement('D1');
  };

  MessageManager.prototype.addMessage = function(text, img, type, stackTrace) {
    var component, txt;
    component = document.getElementById('D1txt');
    txt = "<div class='" + type + "'><img src='" + img + "' style='width: 60px' align='left'/>" + text + "</div>";
    component.innerHTML += txt;
    this.renderizer.elements['D1'].onClose = function(renderizer, event, ui) {
      component = document.getElementById('D1txt');
      return component.innerHTML = "";
    };
    this.renderizer.elements['D1'].open();
    return this;
  };

  return MessageManager;

})();

InstanceManager = (function() {
  function InstanceManager() {}

  InstanceManager.getInstance = function(className, arg1, arg2, arg3) {
    eval('ret = new className(arg1,arg2,arg3)');
    return ret;
  };

  InstanceManager.getInstanceOrDefault = function(className, defaultClass, arg1, arg2, arg3) {
    var extClassName;
    if (defaultClass == null) {
      defaultClass = 'default';
    }
    extClassName = className + 'Ext';
    eval('if(typeof(' + extClassName + ')=="function"){ ret = new ' + extClassName + '(arg1,arg2,arg3); }else if(typeof(' + className + ')=="function"){ ret = new ' + className + '(arg1,arg2,arg3); }else{ ret = new ' + defaultClass + '(arg1,arg2,arg3); } ');
    return ret;
  };

  return InstanceManager;

})();

RenderizerAbstract = (function() {
  function RenderizerAbstract(parent) {
    var self;
    this.parent = parent;
    this.clear();
    self = this;
    $.fn.element = function(i) {
      var id;
      id = this.get(0).id;
      return self.elements[id];
    };
  }

  RenderizerAbstract.prototype.addElement = function(name, instance) {
    var _ref;
    this.elements[name] = instance;
    if (instance.parent) {
      if ((_ref = this.elements[instance.parent]) != null) {
        _ref.addElement(instance);
      }
    }
    if (!instance.parent) {
      return this.roots.push(instance);
    }
  };

  RenderizerAbstract.prototype.addContainer = function(instance) {
    return this.containers.push(instance);
  };

  RenderizerAbstract.prototype.getElement = function(name) {
    return this.elements[name];
  };

  RenderizerAbstract.prototype.getElements = function() {
    return this.elements;
  };

  RenderizerAbstract.prototype.clear = function() {
    this.elements = {};
    this.roots = [];
    this.containers = [];
    return this;
  };

  RenderizerAbstract.prototype.render = function() {
    var root, _i, _len, _ref, _results;
    _ref = this.roots;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      root = _ref[_i];
      _results.push(root.render(null, this));
    }
    return _results;
  };

  RenderizerAbstract.prototype.renderOne = function(elementRoot) {
    return this.elements[elementRoot].render(null, this);
  };

  RenderizerAbstract.prototype.startElement = function(elementRoot) {
    this.elements[elementRoot].start(this);
    return this.elements[elementRoot].afterAllStart(this);
  };

  RenderizerAbstract.prototype.createElement = function(def) {
    var specificRender;
    specificRender = InstanceManager.getInstanceOrDefault(def.type + 'Render', 'SpecificElementRender', def);
    return specificRender.createElement(def, this);
  };

  RenderizerAbstract.prototype.startElements = function() {
    var root, _i, _j, _len, _len1, _ref, _ref1, _results;
    _ref = this.roots;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      root = _ref[_i];
      root.start(this);
    }
    _ref1 = this.roots;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      root = _ref1[_j];
      _results.push(root.afterAllStart(this));
    }
    return _results;
  };

  RenderizerAbstract.prototype.realignElements = function(target) {
    var root, targetRoot, _i, _j, _len, _len1;
    targetRoot = target || this.roots;
    for (_i = 0, _len = targetRoot.length; _i < _len; _i++) {
      root = targetRoot[_i];
      root.realign(this);
    }
    this.defineContainerWidths();
    for (_j = 0, _len1 = targetRoot.length; _j < _len1; _j++) {
      root = targetRoot[_j];
      root.afterAllRealign(this);
    }
    this.defineContainerHeights();
    return this;
  };

  RenderizerAbstract.prototype.renderDependences = function() {
    var root, _i, _len, _ref, _results;
    _ref = this.roots;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      root = _ref[_i];
      _results.push(root.renderDependences($('body'), this));
    }
    return _results;
  };

  RenderizerAbstract.prototype.addCssFile = function(cssFileName) {
    cssFileName = '/js/zRender/css/' + cssFileName;
    return $('head').append('<link rel="stylesheet" href="' + cssFileName + '" type="text/css" />');
  };

  RenderizerAbstract.prototype.configureFontSizes = function() {};

  RenderizerAbstract.prototype.defineContainerWidths = function(createCommand) {
    var elements, instance, _base, _i, _len, _ref, _results;
    elements = 0;
    _ref = this.containers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      instance = _ref[_i];
      if (typeof (_base = instance.specificRender).markElements === "function") {
        _base.markElements(instance, this);
      }
      if (instance.parent) {
        if (!instance.parent.specificRender.widthsDefined) {
          _results.push(instance.parent.specificRender.defineContainerWidths(instance.parent, this));
        } else {
          _results.push(void 0);
        }
      } else {
        if (instance.parentIfNotParent) {
          _results.push($(instance.specificRender.component).css('width', $(instance.parentIfNotParent).css('width')));
        } else {
          _results.push(instance.setWidth('100%'));
        }
      }
    }
    return _results;
  };

  RenderizerAbstract.prototype.defineContainerHeights = function(createCommand) {
    var elements, instance, _base, _i, _len, _ref, _results;
    elements = 0;
    _ref = this.containers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      instance = _ref[_i];
      if (typeof (_base = instance.specificRender).markElements === "function") {
        _base.markElements(instance, this);
      }
      if (instance.parent) {
        if (!instance.parent.specificRender.heightsDefined) {
          _results.push(instance.parent.specificRender.defineContainerHeights(instance.parent, this));
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(instance.setHeight('100%'));
      }
    }
    return _results;
  };

  RenderizerAbstract.prototype.linkDefaulsInElements = function(elements) {
    var element, instance, _ref, _results;
    _results = [];
    for (element in elements) {
      instance = elements[element];
      _results.push((_ref = this.elements[element].specificRender) != null ? _ref.linkDefaults(this.elements[element], this) : void 0);
    }
    return _results;
  };

  RenderizerAbstract.prototype.require = function(library, callback, errorCallback) {
    return $.ajax({
      url: library,
      dataType: "script",
      async: false,
      success: function(data, textStatus, jqXHR) {
        return callback(data, textStatus, jqXHR);
      },
      error: function(jqXHR, textStatus, errorThrown) {
        if (errorCallback === 'function') {
          return errorCallback(jqXHR, textStatus, errorThrown);
        } else {
          throw new Error("Não foi possível encontrar a library: " + library);
        }
      }
    });
  };

  return RenderizerAbstract;

})();

SenderAbstract = (function() {
  function SenderAbstract(parent) {
    this.parent = parent;
  }

  SenderAbstract.prototype.setSenderAction = function(url) {
    this.url = url;
  };

  SenderAbstract.prototype.triggerEvent = function(sendList, container, serverEvent, def, caller, sender) {
    var destiny, events, post, self;
    destiny = '/' + this.parent.config.module + '/' + this.parent.config.controller + '/' + this.parent.config.process;
    this.data = {};
    this.prepareDataToSend(sendList);
    events = {};
    events[container] = {};
    events[container][serverEvent] = {};
    post = {};
    post.events = JSON.stringify(events);
    post.values = JSON.stringify(this.data);
    self = this;
    return $.ajax({
      url: destiny,
      type: "POST",
      cache: false,
      dataType: 'json',
      data: post
    }).done(function(data, textStatus, jqXHR) {
      return self.receiveServerResponse(data, textStatus, jqXHR);
    }).fail(function(jqXHR, textStatus, errorThrown) {
      return self.receiveServerError(jqXHR, textStatus, errorThrown);
    });
  };

  SenderAbstract.prototype.receiveServerResponse = function(data, textStatus, jqXHR) {
    return this.parent.process(data);
  };

  SenderAbstract.prototype.receiveServerError = function(data, textStatus, errorThrown) {
    console.log('SERVER ERROR');
    return console.log(data);
  };

  SenderAbstract.prototype.prepareDataToSend = function(sendList) {
    var elementsToSend;
    if (sendList === '*' || sendList === '') {
      return this.getAllValues();
    }
    return elementsToSend = sendList.split(',');
  };

  SenderAbstract.prototype.getAllValues = function() {
    var id, instance, _ref, _results;
    _ref = this.parent.render.elements;
    _results = [];
    for (id in _ref) {
      instance = _ref[id];
      if (!instance.isContainer()) {
        _results.push(this.data[id] = instance.getValue());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return SenderAbstract;

})();


/*
De acordo com a constante de conforto humano de cada elemento, garante que haverá
espaço suficiente para exibir o conteúdo de cada elemento.
Quando aplicado em Lines justificadas, pode causar overflow dos campos, o que resulta
em sua queda.
 */

HumanConfortableSizesAlgorithm = (function() {
  function HumanConfortableSizesAlgorithm() {}

  HumanConfortableSizesAlgorithm.prototype.run = function(def, renderizer, children, trySize) {
    var child, element, size, _i, _len, _ref, _results;
    if (trySize == null) {
      trySize = null;
    }
    size = 0;
    _ref = $('#' + def.id).children();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      element = $(child).element();
      if (element === void 0) {
        continue;
      }
      element.equalizeRects();
      if (trySize) {
        if (element.getHumanConfort() < element.getHumanConfortLimit()) {
          $(child).element().setWidth(trySize);
        }
      }
      if (element.getHumanConfort() < element.getHumanConfortLimit()) {
        _results.push($(child).element().ajustHumanConfortWidth());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return HumanConfortableSizesAlgorithm;

})();


/* Algoritmo de alinhamento para linhas justificadas.
 */

JustifyFieldsInBarAlgoritm = (function() {
  function JustifyFieldsInBarAlgoritm() {
    this.processContainers = false;
  }


  /*
  Faz com que todos os elementos de uma Linha contenham tamanhos proporcionais de modo que todo o espaço util seja
  ocupado
   */

  JustifyFieldsInBarAlgoritm.prototype.run = function(def, specificRender, renderizer, children, screenElement, methodToGetSizeScreen, percentual) {
    this.def = def;
    this.renderizer = renderizer;
    this.screenElement = screenElement;
    this.methodToGetSizeScreen = methodToGetSizeScreen;
    this.percentual = percentual;
    this._initialize();
    this._calculateSizeScreen();
    this._removeMarginsOfScreenSize();
    this._defineNewWidths();
    specificRender.lastElement = this.lastElements;
    return specificRender.elements = this.elements;
  };

  JustifyFieldsInBarAlgoritm.prototype._initialize = function() {
    this.componentsSizes = 0;
    this.padding = 0;
    this.count = 0;
    this.usedSize = 0;
    this.expectedUsedSize = 0;
    this.renderCount = 0;
    this.lastElement = null;
    return this.elements = [];
  };

  JustifyFieldsInBarAlgoritm.prototype._calculateSizeScreen = function() {
    if (this.methodToGetSizeScreen === 'width') {
      return this.sizeScreen = Math.round(this.screenElement.getRealWidth() * this.percentual / 100);
    } else {
      return this.sizeScreen = Math.round(this.screenElement.getRight() * this.percentual / 100);
    }
  };

  JustifyFieldsInBarAlgoritm.prototype._removeMarginsOfScreenSize = function() {
    var margin, windowWidth;
    if (this.def.children.length > 0) {
      margin = this.def.children[0].getLeft() - this.def.getParent().getLeft();
      this.sizeScreen -= margin * 2;
    }
    windowWidth = $(window).width();
    if (windowWidth < 300) {
      return this.sizeScreen -= margin * 4;
    } else if (windowWidth < 500) {
      return this.sizeScreen -= margin * 3;
    } else if (windowWidth < 700) {
      return this.sizeScreen -= margin * 2;
    } else if (windowWidth < 900) {
      return this.sizeScreen -= margin;
    }
  };

  JustifyFieldsInBarAlgoritm.prototype._setNewSize = function(element) {
    this.newSize = this.sizeScreen;
    return element.setWidth(this.newSize);
  };

  JustifyFieldsInBarAlgoritm.prototype._defineNewWidths = function() {
    var child, element, _i, _len, _ref, _results;
    _ref = $('#' + this.def.id).children();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      element = this.renderizer.elements[child.id];
      if (element === void 0) {
        continue;
      }
      this.renderCount++;
      if (!element.isContainer() || this.processContainers) {
        this._setNewSize(element);
        this.lastElement = element;
        _results.push(this.elements.push(element));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return JustifyFieldsInBarAlgoritm;

})();


/* Algoritmo de alinhamento para linhas justificadas.
 */

JustifyFieldsInLineAlgoritm = (function() {
  function JustifyFieldsInLineAlgoritm() {
    this.processContainers = false;
  }


  /*
  Faz com que todos os elementos de uma Linha contenham tamanhos proporcionais de modo que todo o espaço util seja
  ocupado
   */

  JustifyFieldsInLineAlgoritm.prototype.run = function(def, specificRender, renderizer, children, screenElement, methodToGetSizeScreen, percentual) {
    this.def = def;
    this.renderizer = renderizer;
    this.screenElement = screenElement;
    this.methodToGetSizeScreen = methodToGetSizeScreen;
    this.percentual = percentual;
    this._initialize();
    this._calculateComponentSizes('left');
    this._calculateSizeScreen();
    this._removeMarginsOfScreenSize();
    this._defineNewWidths();
    specificRender.lastElement = this.lastElements;
    return specificRender.elements = this.elements;
  };

  JustifyFieldsInLineAlgoritm.prototype._initialize = function() {
    this.componentsSizes = 0;
    this.padding = 0;
    this.count = 0;
    this.usedSize = 0;
    this.expectedUsedSize = 0;
    this.renderCount = 0;
    this.lastElement = null;
    return this.elements = [];
  };

  JustifyFieldsInLineAlgoritm.prototype._calculateComponentSizes = function(addClass) {
    var child, _i, _len, _ref, _results;
    _ref = $('#' + this.def.id).children();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      this.componentsSizes += $(child).element().getSizeInScreen() * 1;
      _results.push($(child).addClass(addClass));
    }
    return _results;
  };

  JustifyFieldsInLineAlgoritm.prototype._calculateSizeScreen = function() {
    if (this.methodToGetSizeScreen === 'width') {
      return this.sizeScreen = Math.round(this.screenElement.getRealWidth() * this.percentual / 100);
    } else {
      return this.sizeScreen = Math.round(this.screenElement.getRight() * this.percentual / 100);
    }
  };

  JustifyFieldsInLineAlgoritm.prototype._removeMarginsOfScreenSize = function() {
    var margin, windowWidth;
    if (this.def.children.length > 0) {
      margin = this.def.children[0].getLeft() - this.def.getParent().getLeft();
      this.sizeScreen -= margin * 2;
    }
    windowWidth = $(window).width() * 1;
    if (windowWidth < 300) {
      return this.sizeScreen -= margin * 4;
    } else if (windowWidth < 500) {
      return this.sizeScreen -= margin * 3;
    } else if (windowWidth < 700) {
      return this.sizeScreen -= margin * 2;
    } else if (windowWidth < 1000) {
      return this.sizeScreen -= margin * 0.5;
    } else if (windowWidth < 1200) {
      return this.sizeScreen -= margin * 0.9;
    }
  };

  JustifyFieldsInLineAlgoritm.prototype._getJustifyWidth = function(element, children, sizeScreen, componentsSizes, usedSize, renderCount) {
    return Math.round(element.getSizeInScreen() * sizeScreen / componentsSizes);
  };

  JustifyFieldsInLineAlgoritm.prototype._calculateUsedSize = function(element) {
    if (this.lastElement) {
      this.usedSize += element.getRight() - this.lastElement.getRight();
    } else {
      this.usedSize += element.getRealWidth();
    }
    return this.expectedUsedSize += this.newSize;
  };

  JustifyFieldsInLineAlgoritm.prototype._distributeDifferencesInUsedSize = function(element) {
    var diff;
    if (this.usedSize > this.expectedUsedSize) {
      diff = this.usedSize - this.expectedUsedSize;
      if (this.lastElement) {
        this.lastElement.setWidth(this.lastElement.getRealWidth() - (diff / 2));
        element.setWidth(this.newSize - (diff / 2));
      } else {
        element.setWidth(this.newSize - diff);
      }
      return this.usedSize = this.expectedUsedSize;
    }
  };

  JustifyFieldsInLineAlgoritm.prototype._tryPreventOverflow = function(element) {
    var obj, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
    if (this.renderCount === this.children && this.usedSize < this.sizeScreen) {
      if (this.lastElement && this.lastElement.getTop() !== element.getTop()) {
        element.decWidth(1);
        if (this.lastElement.getTop() !== element.getTop()) {
          _ref = this.elements;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            obj = _ref[_i];
            obj.decWidth(1);
          }
        }
        if (this.lastElement.getTop() !== element.getTop()) {
          element.decWidth(1);
        }
        if (this.lastElement.getTop() !== element.getTop()) {
          _ref1 = this.elements;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            obj = _ref1[_j];
            obj.decWidth(1);
          }
        }
        if (this.lastElement.getTop() !== element.getTop()) {
          element.decWidth(1);
        }
        if (this.lastElement.getTop() !== element.getTop()) {
          _ref2 = this.elements;
          _results = [];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            obj = _ref2[_k];
            _results.push(obj.decWidth(1));
          }
          return _results;
        }
      }
    }
  };

  JustifyFieldsInLineAlgoritm.prototype._setNewSize = function(element) {
    this.newSize = this._getJustifyWidth(element, this.children, this.sizeScreen, this.componentsSizes, this.usedSize, this.renderCount);
    return element.setWidth(this.newSize);
  };

  JustifyFieldsInLineAlgoritm.prototype._defineNewWidths = function() {
    var child, element, _i, _len, _ref, _results;
    _ref = $('#' + this.def.id).children();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      element = this.renderizer.elements[child.id];
      this.renderCount++;
      if (!element.isContainer() || this.processContainers) {
        this._setNewSize(element);
        this._calculateUsedSize(element);
        this._distributeDifferencesInUsedSize(element);
        this._tryPreventOverflow(element);
        this.lastElement = element;
        _results.push(this.elements.push(element));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return JustifyFieldsInLineAlgoritm;

})();

SpecificElementRender = (function() {
  function SpecificElementRender(def) {}

  SpecificElementRender.prototype.createElement = function(def, renderizer) {
    return document.createElement('div');
  };

  SpecificElementRender.prototype.startElement = function(def) {};

  SpecificElementRender.prototype.beforeStartChildren = function(def, renderizer) {};

  SpecificElementRender.prototype.afterStartChildren = function(def, renderizer) {};

  SpecificElementRender.prototype.afterAllStart = function(def, renderizer) {};

  SpecificElementRender.prototype.bindEvent = function(def, eventName, functionName, container, sendList, serverEvent) {};

  SpecificElementRender.prototype.linkDefaults = function(def, renderizer) {};

  return SpecificElementRender;

})();

ButtonRender = (function(_super) {
  __extends(ButtonRender, _super);

  function ButtonRender(def) {
    ButtonRender.__super__.constructor.call(this, def);
    this.inputType = 'button';
  }

  ButtonRender.prototype.createElement = function(def, renderizer) {
    var ret;
    ret = document.createElement('div');
    def.obj_field = document.createElement('input');
    def.obj_field.type = this.inputType;
    def.setValue(def.value);
    $(def.obj_field).addClass('input');
    $(ret).append(def.obj_field);
    $(ret).addClass('button');
    def.specificRender = this;
    return ret;
  };

  ButtonRender.prototype.bindEvent = function(sender, def, eventName, functionName, container, sendList, serverEvent) {
    var self;
    self = this;
    return $(def.obj_field).on(eventName, function(e) {
      var functionExec;
      functionExec = functionName + '("' + sendList + '", "' + container + '","' + serverEvent + '",def,self,sender);';
      try {
        return eval(functionExec);
      } catch (_error) {
        e = _error;
        return alert('Execute ' + functionName + ': ' + e);
      }
    });
  };

  return ButtonRender;

})(SpecificElementRender);

IconButtonRender = (function(_super) {
  __extends(IconButtonRender, _super);

  function IconButtonRender(def) {
    IconButtonRender.__super__.constructor.call(this, def);
    this.inputType = 'button';
  }

  IconButtonRender.prototype.createElement = function(def, renderizer) {
    var ret;
    ret = document.createElement('div');
    def.obj_field = document.createElement('input');
    def.obj_field.type = this.inputType;
    def.setValue(def.value);
    $(def.obj_field).addClass('input');
    $(ret).append(def.obj_field);
    $(ret).addClass('button');
    def.specificRender = this;
    return ret;
  };

  IconButtonRender.prototype.bindEvent = function(sender, def, eventName, functionName, container, sendList, serverEvent) {
    var self;
    self = this;
    return $(def.obj_field).on(eventName, function(e) {
      var functionExec;
      functionExec = functionName + '("' + sendList + '", "' + container + '","' + serverEvent + '",def,self,sender);';
      try {
        return eval(functionExec);
      } catch (_error) {
        e = _error;
        return alert('Execute ' + functionName + ': ' + e);
      }
    });
  };

  return IconButtonRender;

})(SpecificElementRender);

TextFieldRender = (function(_super) {
  __extends(TextFieldRender, _super);

  function TextFieldRender(def) {
    TextFieldRender.__super__.constructor.call(this, def);
    this.inputType = 'text';
  }

  TextFieldRender.prototype.createElement = function(def, renderizer) {
    var ret;
    ret = document.createElement('div');
    def.obj_label = document.createElement('div');
    def.obj_field = document.createElement('input');
    def.obj_field.type = this.inputType;
    def.setLabel(def.label);
    def.setValue(def.value);
    $(def.label).addClass('label');
    $(def.obj_field).addClass('input');
    $(ret).append(def.obj_label);
    $(ret).append(def.obj_field);
    $(ret).addClass('field');
    $(def.obj_field).width($(def.obj_label).width() + 2);
    def.specificRender = this;
    return ret;
  };

  TextFieldRender.prototype.ajustRight = function(def, maxRight, extra) {
    var diffW, right, width;
    if (!this.conta) {
      this.conta = 0;
    }
    this.conta++;
    right = def.getRight();
    width = def.getRealWidth();
    diffW = maxRight - right;
    if (maxRight > right) {
      def.setWidth(width + diffW);
    }
    return this;
  };

  TextFieldRender.prototype.realignElement = function(def, renderizer) {
    return def.setWidth(10);
  };

  TextFieldRender.prototype.bindEvent = function(sender, def, eventName, functionName, container, sendList, serverEvent) {
    var self;
    self = this;
    return $(def.obj_field).on(eventName, function(e) {
      var functionExec;
      functionExec = functionName + '("' + sendList + '", "' + container + '","' + serverEvent + '");';
      try {
        return eval(functionExec);
      } catch (_error) {
        e = _error;
        return alert('Execute ' + functionName + ': ' + e);
      }
    });
  };

  TextFieldRender.prototype.linkDefaults = function(def, renderizer) {
    console.log(def);
    this.defineMaxLength(def, renderizer);
    return this.defineFormat(def, renderizer);
  };

  TextFieldRender.prototype.defineMaxLength = function(def, renderizer) {
    if (!def.format) {
      return $(def.obj_field).attr('maxlength', def.size);
    }
  };

  TextFieldRender.prototype.defineFormat = function(def, renderizer) {
    var library;
    if (!def.format) {
      return;
    }
    if (!$(def.obj_field).mask) {
      library = 'js/jquery.maskedinput.min.js';
      if (!config.jquerydaPath) {
        config.jquerydaPath = '/js/jqueryda/';
      }
      renderizer.require(config.jquerydaPath + library, function() {
        return typeof console !== "undefined" && console !== null ? console.log('js/jquery.maskedinput.min.js carregada') : void 0;
      });
    }
    return $(def.obj_field).mask(def.format);
  };

  return TextFieldRender;

})(SpecificElementRender);

PasswordRender = (function(_super) {
  __extends(PasswordRender, _super);

  function PasswordRender(def) {
    PasswordRender.__super__.constructor.call(this, def);
    this.inputType = 'password';
  }

  return PasswordRender;

})(TextFieldRender);

FormRender = (function(_super) {
  __extends(FormRender, _super);

  function FormRender() {
    return FormRender.__super__.constructor.apply(this, arguments);
  }

  FormRender.prototype.createElement = function(def, renderizer) {
    var ret;
    ret = document.createElement('div');
    $(ret).addClass('form');
    def.specificRender = this;
    renderizer.addContainer(def);
    return ret;
  };

  FormRender.prototype.beforeStartChildren = function(def, renderizer) {
    if (def.width) {
      return def.setWidth(def.width);
    }
  };

  FormRender.prototype.ajustRight = function(element, maxRight, extra) {
    return element.specificRender.ajustRight(element, maxRight, extra);
  };

  FormRender.prototype.startElement = function(def, renderizer) {
    var group, groupRenders, line, lineRenders, pager, pagerRenders, windowWidth, _i, _j, _k, _len, _len1, _len2, _results;
    windowWidth = $(window).width();
    if (windowWidth < 300) {
      $('body').css('font-size', 7);
    } else if (windowWidth < 500) {
      $('body').css('font-size', 8);
    } else if (windowWidth < 700) {
      $('body').css('font-size', 9);
    } else if (windowWidth < 900) {
      $('body').css('font-size', 10);
    } else {
      $('body').css('font-size', 11);
    }
    lineRenders = def.getLineRenders();
    groupRenders = def.getGroupRenders();
    pagerRenders = def.getPagerRenders();
    for (_i = 0, _len = groupRenders.length; _i < _len; _i++) {
      group = groupRenders[_i];
      if (typeof group.afterFormStart === "function") {
        group.afterFormStart();
      }
    }
    for (_j = 0, _len1 = pagerRenders.length; _j < _len1; _j++) {
      pager = pagerRenders[_j];
      if (typeof pager.afterFormStart === "function") {
        pager.afterFormStart();
      }
    }
    _results = [];
    for (_k = 0, _len2 = lineRenders.length; _k < _len2; _k++) {
      line = lineRenders[_k];
      _results.push(line.afterFormStart());
    }
    return _results;
  };

  FormRender.prototype.realignElement = function(def, renderizer) {
    this.heightsDefined = false;
    this.widthsDefined = false;
    $(ret).removeClass('form');
    def.firstSize = $('body').width();
    return $(def.element).width('100%');
  };

  FormRender.prototype.afterRealignChildren = function(def, renderizer) {};

  FormRender.prototype.afterRealignChildren = function(def, renderizer) {};

  FormRender.prototype.afterAllRealign = function(def, renderizer) {
    this.startElement(def, renderizer);
    return this.afterAllStart(def, renderizer);
  };

  FormRender.prototype.markElements = function(def, renderizer) {
    var child, count, last, _i, _len, _ref, _results;
    last = def.children.length;
    count = 0;
    _ref = def.children;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      count++;
      if (count === 1) {
        $(child.component).attr("first", child.parent.type);
      } else if (count === last) {
        $(child.component).attr("last", child.parent.type);
      } else {
        $(child.component).attr("mid", child.parent.type);
      }
      _results.push($(child.component).attr("in", child.parent.getContainerStyle()));
    }
    return _results;
  };

  FormRender.prototype.defineContainerWidths = function(def, renderizer) {
    var group, groupRenders, line, lineRenders, pager, pagerRenders, _i, _j, _k, _len, _len1, _len2, _results;
    this.widthsDefined = true;
    lineRenders = def.getLineRenders();
    groupRenders = def.getGroupRenders();
    pagerRenders = def.getPagerRenders();
    for (_i = 0, _len = groupRenders.length; _i < _len; _i++) {
      group = groupRenders[_i];
      group.element.setWidth("94.42%");
      group.element.setInternalWidth(group.element.getRealWidth());
    }
    for (_j = 0, _len1 = pagerRenders.length; _j < _len1; _j++) {
      pager = pagerRenders[_j];
      pager.element.setWidth("94.42%");
      pager.element.setInternalWidth(pager.element.getRealWidth());
    }
    _results = [];
    for (_k = 0, _len2 = lineRenders.length; _k < _len2; _k++) {
      line = lineRenders[_k];
      line.element.setWidth("100%");
      _results.push(line.element.setInternalWidth(line.element.getRealWidth()));
    }
    return _results;
  };

  FormRender.prototype.afterAllStart = function(def, renderizer) {
    var group, groupRenders, lastGroup, lastTop, top, _i, _len, _results;
    groupRenders = def.getGroupRenders();
    lastTop = 0;
    lastGroup = null;
    _results = [];
    for (_i = 0, _len = groupRenders.length; _i < _len; _i++) {
      group = groupRenders[_i];
      if (group.element.parent.type !== 'Form') {
        $(group.element.component).css('width', "initial");
      }
      top = group.element.getTop();
      if (top === lastTop && lastGroup) {
        if (group.element.getHeight() > lastGroup.element.getHeight()) {
          lastGroup.element.setHeight(group.element.getHeight());
        } else {
          group.element.setHeight(lastGroup.element.getHeight());
        }
      }
      lastTop = top;
      _results.push(lastGroup = group);
    }
    return _results;
  };

  FormRender.prototype.defineContainerHeights = function(def, renderizer) {};

  return FormRender;

})(SpecificElementRender);

BarRender = (function(_super) {
  __extends(BarRender, _super);

  function BarRender() {
    return BarRender.__super__.constructor.apply(this, arguments);
  }

  BarRender.prototype.createElement = function(def, renderizer) {
    var ret;
    ret = document.createElement('div');
    $(ret).addClass('bar');
    if ((def.margin != null) > 0) {
      $(def.component).css('padding-left', def.margin);
    }
    def.specificRender = this;
    renderizer.addContainer(def);
    this.element = def;
    this.component = ret;
    return ret;
  };

  BarRender.prototype.afterFormStart = function() {};

  BarRender.prototype.startElement = function(def, renderizer) {
    this._initializeAlgorithms();
    BarRender.__super__.startElement.call(this, def, renderizer);
    this.elements = [];
    def.parent.addBarRender(this);
    if (def.margin > -1) {
      $(def.component).css('padding-left', def.margin + 'px');
    }
    this._alignElements(def, renderizer);
    this.beforeFormStart = function() {
      return this.processSameRight(def, renderizer, children);
    };
    return this;
  };

  BarRender.prototype._initializeAlgorithms = function() {
    this._algorithmHumanConfortableSizes = new HumanConfortableSizesAlgorithm();
    return this._algorithmJustify = new JustifyFieldsInBarAlgoritm();
  };

  BarRender.prototype._alignElements = function(def, renderizer) {
    var children;
    children = $('#' + def.id).children().length;
    if (def.align === 'justify') {
      return this._justify(def, this, renderizer, children, def.getParent(), 'width', 100);
    } else if (def.align === 'left') {
      return this._renderLeft(def, renderizer, children);
    } else if (def.align === 'pseudoJustify') {
      this._renderLeft(def, renderizer, children);
      return this.afterFormStart = function() {
        return this._justify(def, this, renderizer, children, $('#' + def.justitfyElement).element(), 'right', 100);
      };
    } else if (def.align === 'pseudoJustifyHalf') {
      this._renderLeft(def, renderizer, children);
      return this.afterFormStart = function() {
        return this._justify(def, this, renderizer, children, $('#' + def.justitfyElement).element(), 'right', 50);
      };
    } else {
      return this.analizeHumanComfortableSize(def, renderizer, children);
    }
  };

  BarRender.prototype._justify = function(def, specificRender, renderizer, children, screenElement, methodToGetSizeScreen, percentual) {
    return this._algorithmJustify.run(def, specificRender, renderizer, children, screenElement, methodToGetSizeScreen, percentual);
  };

  BarRender.prototype._renderLeft = function(def, renderizer, children) {
    return this.analizeHumanComfortableSize(def, renderizer, children);
  };

  BarRender.prototype.analizeHumanComfortableSize = function(def, renderizer, children, trySize) {
    if (trySize == null) {
      trySize = null;
    }
    return this._algorithmHumanConfortableSizes.run(def, renderizer, children, trySize);
  };

  BarRender.prototype.processSameRight = function(def, renderizer, children) {
    var child, diff, element, extra, oldW, same, _i, _len, _ref, _results;
    _ref = $('#' + def.id).children();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      element = $(child).element();
      same = element.getSameRightElement();
      if (same) {
        oldW = element.getWidth();
        diff = same.getRight() - element.getRight();
        element.setWidth(element.getRealWidth() + diff);
        extra = element.getExtraWidth();
        diff = same.getRight() - element.getRight() - extra;
        element.setWidth(element.getRealWidth() + diff);
        _results.push(this.analizeHumanComfortableSize(def, renderizer, children, oldW));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  BarRender.prototype.processGroups = function(def, renderizer) {};

  BarRender.prototype.defineContainerWidths = function(def, renderizer) {
    var groupRenders;
    this._initializeAlgorithms();
    this._algorithmJustify.processContainers = true;
    groupRenders = def.getGroupRenders();
    return this._justify(def, this, renderizer, groupRenders.length, def.parent, 'width', 100);
  };

  return BarRender;

})(FormRender);

DialogRender = (function(_super) {
  __extends(DialogRender, _super);

  function DialogRender() {
    return DialogRender.__super__.constructor.apply(this, arguments);
  }

  DialogRender.prototype.createElement = function(def, renderizer) {
    var ret;
    ret = document.createElement('div');
    $(ret).addClass('bar');
    if ((def.margin != null) > 0) {
      $(def.component).css('padding-left', def.margin);
    }
    def.specificRender = this;
    renderizer.addContainer(def);
    this.element = def;
    this.component = ret;
    return ret;
  };

  DialogRender.prototype.afterFormStart = function() {};

  return DialogRender;

})(FormRender);

GroupRender = (function(_super) {
  __extends(GroupRender, _super);

  function GroupRender() {
    return GroupRender.__super__.constructor.apply(this, arguments);
  }

  GroupRender.prototype.createElement = function(def, renderizer) {
    var ret;
    ret = document.createElement('fieldset');
    def.obj_label = document.createElement('legend');
    def.component = ret;
    $(ret).append(def.obj_label);
    if (def.align && def.align === 'left') {
      $(ret).addClass('groupLeft');
    } else {
      $(ret).addClass('group');
    }
    if (def.label) {
      def.setLabel(def.label);
    }
    def.getParent().addGroupRender(this);
    def.specificRender = this;
    this.element = def;
    this.component = ret;
    renderizer.addContainer(def);
    return ret;
  };

  GroupRender.prototype.beforeStartChildren = function(def, renderizer) {};

  GroupRender.prototype.defineContainerWidths = function(def, renderizer) {
    if (def.width) {
      return this.element.setWidth(def.width);
    }
  };

  GroupRender.prototype.ajustRight = function(element, maxRight, extra) {};

  return GroupRender;

})(FormRender);

LineRender = (function(_super) {
  __extends(LineRender, _super);

  function LineRender() {
    return LineRender.__super__.constructor.apply(this, arguments);
  }

  LineRender.prototype.createElement = function(def, renderizer) {
    var ret;
    ret = document.createElement('div');
    $(ret).addClass('line');
    if ((def.margin != null) > 0) {
      $(def.component).css('padding-left', def.margin);
    }
    $(ret).css('width', '100%');
    def.specificRender = this;
    renderizer.addContainer(def);
    def.parent.addLineRender(this);
    this.element = def;
    this.component = ret;
    return ret;
  };

  LineRender.prototype.afterFormStart = function() {};

  LineRender.prototype.startElement = function(def, renderizer) {
    this._initializeAlgorithms();
    LineRender.__super__.startElement.call(this, def, renderizer);
    this.elements = [];
    def.parent.addLineRender(this);
    if (def.margin > -1) {
      $(def.component).css('padding-left', def.margin + 'px');
    }
    this._alignElements(def, renderizer);
    this.beforeFormStart = function() {
      return this.processSameRight(def, renderizer, children);
    };
    return this;
  };

  LineRender.prototype._initializeAlgorithms = function() {
    this._algorithmJustify = new JustifyFieldsInLineAlgoritm();
    return this._algorithmHumanConfortableSizes = new HumanConfortableSizesAlgorithm();
  };

  LineRender.prototype._alignElements = function(def, renderizer) {
    var children;
    children = $('#' + def.id).children().length;
    if (def.align === 'justify') {
      return this._justify(def, this, renderizer, children, def.getParent(), 'width', 100);
    } else if (def.align === 'left') {
      return this._renderLeft(def, renderizer, children);
    } else if (def.align === 'pseudoJustify') {
      this._renderLeft(def, renderizer, children);
      return this.afterFormStart = function() {
        return this._justify(def, this, renderizer, children, $('#' + def.justitfyElement).element(), 'right', 100);
      };
    } else if (def.align === 'pseudoJustifyHalf') {
      this._renderLeft(def, renderizer, children);
      return this.afterFormStart = function() {
        return this._justify(def, this, renderizer, children, $('#' + def.justitfyElement).element(), 'right', 50);
      };
    } else {
      return this.analizeHumanComfortableSize(def, renderizer, children);
    }
  };

  LineRender.prototype._justify = function(def, specificRender, renderizer, children, screenElement, methodToGetSizeScreen, percentual) {
    return this._algorithmJustify.run(def, specificRender, renderizer, children, screenElement, methodToGetSizeScreen, percentual);
  };

  LineRender.prototype._renderLeft = function(def, renderizer, children) {
    return this.analizeHumanComfortableSize(def, renderizer, children);
  };

  LineRender.prototype.analizeHumanComfortableSize = function(def, renderizer, children, trySize) {
    if (trySize == null) {
      trySize = null;
    }
    return this._algorithmHumanConfortableSizes.run(def, renderizer, children, trySize);
  };

  LineRender.prototype.processSameRight = function(def, renderizer, children) {
    var child, diff, element, extra, oldW, same, _i, _len, _ref, _results;
    _ref = $('#' + def.id).children();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      element = $(child).element();
      same = element.getSameRightElement();
      if (same) {
        oldW = element.getWidth();
        diff = same.getRight() - element.getRight();
        element.setWidth(element.getRealWidth() + diff);
        extra = element.getExtraWidth();
        diff = same.getRight() - element.getRight() - extra;
        element.setWidth(element.getRealWidth() + diff);
        _results.push(this.analizeHumanComfortableSize(def, renderizer, children, oldW));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  LineRender.prototype.processGroups = function(def, renderizer) {};

  LineRender.prototype.defineContainerWidths = function(def, renderizer) {
    var groupRenders;
    this._initializeAlgorithms();
    this._algorithmJustify.processContainers = true;
    groupRenders = def.getGroupRenders();
    return this._justify(def, this, renderizer, groupRenders.length, def.parent, 'width', 100);
  };

  return LineRender;

})(FormRender);

PageRender = (function(_super) {
  __extends(PageRender, _super);

  function PageRender() {
    return PageRender.__super__.constructor.apply(this, arguments);
  }

  PageRender.prototype.createElement = function(def, renderizer) {
    var ret;
    ret = document.createElement('div');
    def.specificRender = this;
    this.element = def;
    this.component = ret;
    $(this.component).addClass('page');
    def.parent.specificRender.addPage(def, renderizer);
    renderizer.addContainer(def);
    return ret;
  };

  PageRender.prototype.beforeStartChildren = function(def, renderizer) {
    if (def.width) {
      return def.setWidth(def.width);
    }
  };

  PageRender.prototype.defineContainerWidths = function(def, renderizer) {
    var group, groupRenders, groups, margin, newSize, pager, pagerRenders, pagers, _i, _j, _len, _len1, _results;
    groupRenders = def.getGroupRenders();
    pagerRenders = def.getPagerRenders();
    groups = groupRenders.length;
    for (_i = 0, _len = groupRenders.length; _i < _len; _i++) {
      group = groupRenders[_i];
      group.element.setWidth(100 + "%");
      margin = group.element.getLeft() - group.element.parent.getLeft();
      newSize = group.element.getRealWidth() - margin;
      group.element.setWidth(newSize);
    }
    pagers = pagerRenders.length;
    _results = [];
    for (_j = 0, _len1 = pagerRenders.length; _j < _len1; _j++) {
      pager = pagerRenders[_j];
      _results.push(pager.element.setWidth(94.42 + "%"));
    }
    return _results;
  };

  return PageRender;

})(FormRender);

PagerRender = (function(_super) {
  __extends(PagerRender, _super);

  function PagerRender() {
    return PagerRender.__super__.constructor.apply(this, arguments);
  }

  PagerRender.prototype.createElement = function(def, renderizer) {
    var ret;
    if (def.style === 'vertical') {
      return this._createElementVertical(def, renderizer);
    }
    ret = document.createElement('div');
    def.obj_pager = document.createElement('ul');
    def.component = ret;
    $(ret).append(def.obj_pager);
    $(ret).addClass('pager');
    def.getParent().addPagerRender(this);
    def.specificRender = this;
    renderizer.addContainer(def);
    this.element = def;
    return ret;
  };

  PagerRender.prototype._createElementVertical = function(def, renderizer) {
    var ret;
    ret = document.createElement('div');
    def.obj_pager = ret;
    def.component = ret;
    $(ret).addClass('pager');
    def.getParent().addPagerRender(this);
    def.specificRender = this;
    renderizer.addContainer(def);
    this.element = def;
    return ret;
  };

  PagerRender.prototype.addPage = function(def, renderizer) {
    var link, tabButton;
    if (def.parent.style === 'vertical') {
      return this._addPageVertical(def, renderizer);
    }
    tabButton = document.createElement('li');
    link = document.createElement('a');
    $(link).attr('href', '#' + def.id).html(def.label);
    $(tabButton).append(link);
    return $(this.element.obj_pager).append(tabButton);
  };

  PagerRender.prototype._addPageVertical = function(def, renderizer) {
    var tabButton;
    tabButton = document.createElement('h3');
    $(tabButton).html(def.label);
    return $(this.element.obj_pager).append(tabButton);
  };

  PagerRender.prototype.defineContainerWidths = function(def, renderizer) {
    var page, _i, _len, _ref, _results;
    _ref = this.element.children;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      page = _ref[_i];
      _results.push(page.setWidth('100%'));
    }
    return _results;
  };

  return PagerRender;

})(FormRender);

MarginRender = (function(_super) {
  __extends(MarginRender, _super);

  function MarginRender() {
    return MarginRender.__super__.constructor.apply(this, arguments);
  }

  MarginRender.prototype.createElement = function(def, renderizer) {
    var ret;
    ret = document.createElement('div');
    def.component = ret;
    $(ret).width(def.width);
    return ret;
  };

  return MarginRender;

})(SpecificElementRender);

MessageRender = (function(_super) {
  __extends(MessageRender, _super);

  function MessageRender(def) {
    MessageRender.__super__.constructor.call(this, def);
  }

  MessageRender.prototype.createElement = function(def, renderizer) {
    var ret;
    ret = document.createElement('div');
    def.element = ret;
    def.specificRender = this;
    return ret;
  };

  return MessageRender;

})(SpecificElementRender);

HorizontalTitleRender = (function(_super) {
  __extends(HorizontalTitleRender, _super);

  function HorizontalTitleRender() {
    return HorizontalTitleRender.__super__.constructor.apply(this, arguments);
  }

  HorizontalTitleRender.prototype.createElement = function(def, renderizer) {
    return document.createElement('h1');
  };

  return HorizontalTitleRender;

})(SpecificElementRender);
