// Generated by CoffeeScript 1.7.1
var Bar, BarRender, CreateCommand, Element, Form, FormRender, Group, GroupRender, HorizontalTitle, HorizontalTitleRender, HumanConfortableSizesAlgorithm, InstanceManager, JustifyFieldsInBarAlgoritm, JustifyFieldsInLineAlgoritm, Line, LineRender, Margin, MarginRender, Page, PageRender, Pager, PagerRender, RenderizerAbstract, SenderAbstract, SpecificElementRender, TextField, TextFieldRender, VerticalMenu, z, zRender,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

zRender = (function() {
  function zRender(render, sender) {
    this.render = render;
    this.sender = sender;
    if (!(typeof jQuery !== "undefined" && jQuery !== null)) {
      if (typeof console !== "undefined" && console !== null) {
        console.log('jQuery não está presente');
      }
    }
    render.parent = this;
    sender.parent = this;
  }

  zRender.prototype._parse = function(commands) {
    var command, elements;
    for (command in commands) {
      elements = commands[command];
      if ((command * 1) !== 'NaN') {
        this.execute(command, elements);
      } else {
        this._parse(elements);
      }
    }
    return this;
  };

  zRender.prototype._configureHumanSizes = function() {
    return this.render.configureFontSizes();
  };

  zRender.prototype.execute = function(command, elements) {
    var executerName;
    executerName = command + 'Command';
    eval('var executerInstance = new ' + executerName + '(this)');
    return executerInstance.execute(elements);
  };

  zRender.prototype.start = function() {
    this._configureHumanSizes();
    if (commands) {
      return this._parse(commands);
    }
  };

  return zRender;

})();

$.fn.getClientRects = function(i) {
  return i = this.get(0).getClientRects()[0];
};

z = null;

$(function() {
  z = new zRender(new Render(), new Sender());
  return z.start();
});

CreateCommand = (function() {
  function CreateCommand(parent) {
    this.parent = parent;
  }


  /*
  Recebe uma lista de elementos e os cria cada um segundo sua classe. 
  Após criar cada elemento os envia para o renderizador, que fará as conexões de paternidade
   */

  CreateCommand.prototype.execute = function(elements) {
    var attribs, element, render;
    for (element in elements) {
      attribs = elements[element];
      this.create(element, attribs);
    }
    render = this.parent.render;
    render.renderDependences();
    return $(window).load(function() {
      render.render();
      render.defineContainerWidths(this);
      render.startElements();
      return render.defineContainerHeights(this);
    });
  };

  CreateCommand.prototype.create = function(element, attribs) {
    var instance;
    instance = this.getInstance(attribs.type, attribs);
    if (!instance.name) {
      instance.name = element;
    }
    instance.id = element;
    return this.parent.render.addElement(element, instance);
  };

  CreateCommand.prototype.getInstance = function(type, attribs) {
    eval('ret = new ' + type + '(attribs);');
    return ret;
  };

  return CreateCommand;

})();

Element = (function() {
  var type;

  type = 'element';

  function Element(attribs) {
    var attrib, value, _ref;
    this.attribs = attribs;
    this.diferenca = 0;
    this.children = [];
    _ref = this.attribs;
    for (attrib in _ref) {
      value = _ref[attrib];
      this.setAttribute(attrib, value);
    }
  }

  Element.prototype.setAttribute = function(attrib, value) {
    eval('this.' + attrib + '= "' + value + '"');
    return this.attribs[attrib] = value;
  };

  Element.prototype.getAttribute = function(attrib) {
    return this.attribs[attrib];
  };

  Element.prototype.addElement = function(element) {
    this.children.push(element);
    return element.parent = this;
  };

  Element.prototype.isElement = function() {
    return true;
  };

  Element.prototype.isField = function() {
    return false;
  };

  Element.prototype.isContainer = function() {
    return false;
  };

  Element.prototype.renderAttribs = function(component) {
    var attrib, value, _ref, _results;
    if (this.id) {
      $(component).attr('id', this.id);
    } else {
      $(component).attr('id', this.name);
    }
    $(component).attr('name', this.name);
    _ref = this.attribs;
    _results = [];
    for (attrib in _ref) {
      value = _ref[attrib];
      if (attrib !== 'type' && attrib !== 'value' && attrib !== 'label' && attrib !== 'events') {
        _results.push($(component).attr(attrib, value));
      }
    }
    return _results;
  };

  Element.prototype.renderCustomAttribs = function(component) {};

  Element.prototype.render = function(parent, renderizer) {
    var child, _base, _i, _len, _ref;
    this.component = renderizer.createElement(this);
    this.renderAttribs(this.component);
    this.renderCustomAttribs(this.component);
    _ref = this.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      child.render(this.component, renderizer);
    }
    if (this.value) {
      this.setValue(this.value);
    }
    return typeof (_base = $(parent)).append === "function" ? _base.append(this.component) : void 0;
  };

  Element.prototype.renderDependences = function(parent, renderizer) {
    var child, _i, _len, _ref, _results;
    _ref = this.children;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      _results.push(child.renderDependences(this.component, renderizer));
    }
    return _results;
  };

  Element.prototype.start = function(renderizer) {
    var child, _i, _len, _ref, _ref1, _ref2, _ref3;
    if ((_ref = this.specificRender) != null) {
      if (typeof _ref.beforeStartChildren === "function") {
        _ref.beforeStartChildren(this, renderizer);
      }
    }
    _ref1 = this.children;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      child = _ref1[_i];
      child.start(renderizer);
    }
    if ((_ref2 = this.specificRender) != null) {
      if (typeof _ref2.afterStartChildren === "function") {
        _ref2.afterStartChildren(this, renderizer);
      }
    }
    return (_ref3 = this.specificRender) != null ? typeof _ref3.startElement === "function" ? _ref3.startElement(this, renderizer) : void 0 : void 0;
  };

  Element.prototype.afterAllStart = function(renderizer) {
    var child, _i, _len, _ref, _ref1;
    _ref = this.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      child.afterAllStart(renderizer);
    }
    return (_ref1 = this.specificRender) != null ? _ref1.afterAllStart(this, renderizer) : void 0;
  };

  Element.prototype.realign = function(renderizer) {
    var child, _i, _len, _ref, _ref1, _ref2, _ref3;
    if ((_ref = this.specificRender) != null) {
      if (typeof _ref.beforeRealignChildren === "function") {
        _ref.beforeRealignChildren(this, renderizer);
      }
    }
    _ref1 = this.children;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      child = _ref1[_i];
      child.realign(renderizer);
    }
    if ((_ref2 = this.specificRender) != null) {
      if (typeof _ref2.afterRealignChildren === "function") {
        _ref2.afterRealignChildren(this, renderizer);
      }
    }
    return (_ref3 = this.specificRender) != null ? typeof _ref3.realignElement === "function" ? _ref3.realignElement(this, renderizer) : void 0 : void 0;
  };

  Element.prototype.afterAllRealign = function(renderizer) {
    var child, _i, _len, _ref, _ref1;
    _ref = this.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      child.afterAllRealign(renderizer);
    }
    return (_ref1 = this.specificRender) != null ? typeof _ref1.afterAllRealign === "function" ? _ref1.afterAllRealign(this, renderizer) : void 0 : void 0;
  };

  Element.prototype.setValue = function(value) {
    return $(this.component).val(value);
  };

  Element.prototype.getValue = function(value) {
    return $(this.component).val();
  };

  Element.prototype.setLabel = function(value) {
    return $(this.component).attr('label', value);
  };

  Element.prototype.getLabel = function(value) {
    return $(this.component).attr('label');
  };

  Element.prototype.getPointsForWidth = function(value) {
    var parentW;
    if ((typeof value.search === "function" ? value.search('%') : void 0) > -1) {
      parentW = this.getParent().getWidth();
      return Math.round(parentW * value.substr(0, value.length - 1) / 100);
    }
    return value;
  };

  Element.prototype.setWidth = function(value) {
    var e, real;
    value = this.getPointsForWidth(value);
    if (this.maxWidth && value > this.maxWidth) {
      value = this.maxWidth;
    }
    $(this.component).css('width', value);
    try {
      real = this.getRealWidth();
      this.diferenca = real - value;
      return $(this.component).css('width', value - this.diferenca);
    } catch (_error) {
      e = _error;
    }
  };

  Element.prototype.getWidth = function(value) {
    var ret;
    ret = $(this.component).css('width');
    if (ret.substr(-2) === 'px') {
      ret = ret.substr(0, ret.length - 2);
    }
    return ret;
  };

  Element.prototype.incWidth = function(value) {
    return this.setWidth(this.getRealWidth() + value);
  };

  Element.prototype.decWidth = function(value) {
    return this.setWidth(this.getRealWidth() - value);
  };

  Element.prototype.getSize = function() {
    return this.size;
  };

  Element.prototype.setSize = function(size) {
    this.size = size;
    return this;
  };

  Element.prototype.getSizeInScreen = function() {
    if (this.sizeInScreen) {
      return this.sizeInScreen;
    }
    return this.getSize();
  };

  Element.prototype.setSizeInScreen = function(sizeInScreen) {
    this.sizeInScreen = sizeInScreen;
    return this;
  };

  Element.prototype.setHeight = function(value) {
    return $(this.component).css('height', value);
  };

  Element.prototype.hidde = function() {
    return $(this.component).hidde();
  };

  Element.prototype.show = function() {
    return $(this.component).show();
  };

  Element.prototype.getPaddingRight = function() {
    var ret;
    ret = $(this.component).css('padding-right');
    return ret.substr(0, ret.lenght - 2) * 1;
  };

  Element.prototype.getPaddingLeft = function() {
    var ret;
    ret = $(this.component).css('padding-left');
    return ret.substr(0, ret.lenght - 2) * 1;
  };

  Element.prototype.getRight = function() {
    return $(this.component).getClientRects()['right'];
  };

  Element.prototype.getMaxRigth = function() {
    if (this.maxRigth) {
      return this.$maxRigth();
    }
    return parent.getMaxRigth();
  };

  Element.prototype.getTop = function() {
    return $(this.component).getClientRects()['top'];
  };

  Element.prototype.getBottom = function() {
    return $(this.component).getClientRects()['bottom'];
  };

  Element.prototype.getHeight = function() {
    return $(this.component).getClientRects()['height'];
  };

  Element.prototype.getLeft = function() {
    return $(this.component).getClientRects()['left'];
  };

  Element.prototype.getRealWidth = function() {
    var e;
    try {
      return $(this.component).getClientRects()['width'];
    } catch (_error) {
      e = _error;
      return $(this.component).width();
    }
  };

  Element.prototype.getExtraWidth = function() {
    return this.diferenca;
  };

  Element.prototype.getParent = function() {
    if ((this.parent != null)) {
      return this.parent;
    }
    return null;
  };

  Element.prototype.getHumanConfortLimit = function() {
    var diff, _ref;
    if (this.size && this.size <= 5) {
      diff = 0.2;
    }
    if (this.size && this.size > 30) {
      diff = -0.2;
    } else {
      diff = 0;
    }
    if ((this.humanConfortLimit != null)) {
      return this.humanConfortLimit + diff;
    }
    return ((_ref = this.getParent()) != null ? _ref.getHumanConfortLimit() : void 0) + diff;
  };

  Element.prototype.getHumanConfort = function() {
    return this.getRealWidth() / this.getSize();
  };

  Element.prototype.ajustHumanConfortWidth = function(sizeScreen) {
    var newSize;
    newSize = this.getHumanConfortLimit() * this.getSize();
    if (sizeScreen && newSize > sizeScreen) {
      newSize = sizeScreen;
    }
    return this.setWidth(newSize);
  };

  Element.prototype.getSameRightElement = function(first) {
    var element;
    if (first == null) {
      first = null;
    }
    if (this.sameRight) {
      if (!first) {
        first = this.sameRight;
      }
      element = $('#' + this.sameRight).element();
      if (element.sameRight) {
        if (element.sameRight !== first) {
          return element.getSameRightElement(first);
        }
      }
      return element;
    }
    return null;
  };

  Element.prototype.equalizeRects = function() {};

  Element.prototype.setInternalWidth = function(internalWidth) {
    this.internalWidth = internalWidth;
  };

  Element.prototype.getInternalWidth = function() {
    return this.internalWidth;
  };

  return Element;

})();

TextField = (function(_super) {
  __extends(TextField, _super);

  function TextField(attribs) {
    this.attribs = attribs;
    TextField.__super__.constructor.call(this, this.attribs);
    if (!this.humanConfortLimit) {
      if (this.size > 250) {
        this.humanConfortLimit = 1;
      } else if (this.size > 200) {
        this.humanConfortLimit = 1.5;
      } else if (this.size > 150) {
        this.humanConfortLimit = 2.5;
      } else if (this.size > 100) {
        this.humanConfortLimit = 3.1;
      } else if (this.size > 80) {
        this.humanConfortLimit = 6.1;
      }
    }
  }

  TextField.prototype.setValue = function(value) {
    return $(this.obj_field).val(value);
  };

  TextField.prototype.getValue = function(value) {
    return $(this.obj_field).val();
  };

  TextField.prototype.setLabel = function(value) {
    return $(this.obj_label).html(value);
  };

  TextField.prototype.getLabel = function(value) {
    return $(this.obj_label).html();
  };

  TextField.prototype.setWidth = function(value) {
    var e, real;
    value = this.getPointsForWidth(value);
    if (this.maxWidth && value > this.maxWidth) {
      value = this.maxWidth;
    }
    $(this.obj_field).css('width', value);
    try {
      real = this.getRealWidth();
      this.diferenca = real - value;
      $(this.obj_field).css('width', value - this.diferenca);
    } catch (_error) {
      e = _error;
    }
    try {
      real = this.getRealWidth();
      return this.diferenca = real - value;
    } catch (_error) {
      e = _error;
    }
  };

  TextField.prototype.setHeight = function(value) {
    return $(this.obj_field).css('height', value);
  };

  TextField.prototype.getRealWidth = function() {
    return $(this.obj_field).getClientRects()['width'];
  };

  TextField.prototype.getHumanConfort = function() {
    return this.getRealWidth() / this.getSize();
  };

  TextField.prototype.equalizeRects = function() {
    var fieldw, labelw;
    fieldw = $(this.obj_field).getClientRects()['width'];
    labelw = $(this.obj_label).getClientRects()['width'];
    if (labelw > fieldw) {
      return this.setWidth(labelw);
    }
  };

  return TextField;

})(Element);

Form = (function(_super) {
  __extends(Form, _super);

  function Form(attribs) {
    this.attribs = attribs;
    this.humanConfortLimit = 8.1;
    Form.__super__.constructor.call(this, this.attribs);
    this.lineRenders = [];
    this.barRenders = [];
    this.groupRenders = [];
    this.pagerRenders = [];
  }

  Form.prototype.isElement = function() {
    return true;
  };

  Form.prototype.isField = function() {
    return false;
  };

  Form.prototype.isContainer = function() {
    return true;
  };

  Form.prototype.getContainerStyle = function() {
    return 'Bar';
  };

  Form.prototype.addLineRender = function(lineRender) {
    return this.lineRenders.push(lineRender);
  };

  Form.prototype.getLineRenders = function() {
    return this.lineRenders;
  };

  Form.prototype.addBarRender = function(barRender) {
    return this.barRenders.push(barRender);
  };

  Form.prototype.getBarRenders = function() {
    return this.barRenders;
  };

  Form.prototype.addGroupRender = function(groupRender) {
    return this.groupRenders.push(groupRender);
  };

  Form.prototype.getGroupRenders = function() {
    return this.groupRenders;
  };

  Form.prototype.addPagerRender = function(pagerRender) {
    return this.pagerRenders.push(pagerRender);
  };

  Form.prototype.getPagerRenders = function() {
    return this.pagerRenders;
  };

  Form.prototype.getInternalWidth = function() {
    return this.getRight();
  };

  Form.prototype.getPointsForWidth = function(value) {
    var parentW;
    if (this.type !== 'Form') {
      return Form.__super__.getPointsForWidth.call(this, value);
    }
    if ((typeof value.search === "function" ? value.search('%') : void 0) > -1) {
      parentW = this.getRealWidth();
      if (this.firstSize) {
        parentW = this.firstSize;
      }
      this.firstSize = parentW;
      return Math.round(parentW * value.substr(0, value.length - 1) / 100);
    }
    return value;
  };

  Form.prototype.getSize = function() {
    if (this.size) {
      return this.size;
    }
    return this._getMaxChildrenSize();
  };

  Form.prototype._getMaxChildrenSize = function() {
    var bar, bars, child, line, lines, maxSize, size, _i, _j, _k, _len, _len1, _len2, _ref;
    lines = this.getLineRenders();
    if (lines.length > 0) {
      maxSize = 0;
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        size = line.element.getSizeInScreen() * 1;
        if (size > maxSize) {
          maxSize = size;
        }
      }
      return maxSize;
    }
    bars = this.getBarRenders();
    if (bars.length > 0) {
      maxSize = 0;
      for (_j = 0, _len1 = bars.length; _j < _len1; _j++) {
        bar = bars[_j];
        size = bar.element.getSizeInScreen() * 1;
        if (size > maxSize) {
          maxSize = size;
        }
      }
      return maxSize;
    }
    maxSize = 0;
    _ref = this.children;
    for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
      child = _ref[_k];
      maxSize += child.getSizeInScreen() * 1;
    }
    return maxSize;
  };

  return Form;

})(Element);

Bar = (function(_super) {
  __extends(Bar, _super);

  function Bar() {
    return Bar.__super__.constructor.apply(this, arguments);
  }

  Bar.prototype.getContainerStyle = function() {
    return 'Bar';
  };

  Bar.prototype._getMaxChildrenSize = function() {
    var child, maxSize, size, _i, _len, _ref;
    maxSize = 0;
    _ref = this.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      size = child.getSizeInScreen() * 1;
      if (size > maxSize) {
        maxSize = size;
      }
    }
    return maxSize;
  };

  return Bar;

})(Form);

Group = (function(_super) {
  __extends(Group, _super);

  function Group(attribs) {
    this.attribs = attribs;
    Group.__super__.constructor.call(this, this.attribs);
  }

  Group.prototype.setLabel = function(value) {
    return $(this.obj_label).html(value);
  };

  Group.prototype.getLabel = function(value) {
    return $(this.obj_label).html();
  };

  Group.prototype.getPointsForWidth = function(value) {
    var parentW;
    if ((typeof value.search === "function" ? value.search('%') : void 0) > -1) {
      parentW = this.getParent().getWidth();
      return Math.round(parentW * value.substr(0, value.length - 1) / 100);
    }
    return value;
  };

  Group.prototype.getInternalWidth = function() {
    return this.getRealWidth();
  };

  Group.prototype.start = function(renderizer) {
    var _ref;
    if ((_ref = this.specificRender) != null) {
      _ref.beforeStartChildren(this, renderizer);
    }
    return Group.__super__.start.call(this, renderizer);
  };

  return Group;

})(Form);

Line = (function(_super) {
  __extends(Line, _super);

  function Line() {
    return Line.__super__.constructor.apply(this, arguments);
  }

  Line.prototype.getContainerStyle = function() {
    return 'Line';
  };

  return Line;

})(Form);

Page = (function(_super) {
  __extends(Page, _super);

  function Page(attribs) {
    this.attribs = attribs;
    Page.__super__.constructor.call(this, this.attribs);
  }

  Page.prototype.setLabel = function(value) {
    return $(this.obj_label).html(value);
  };

  Page.prototype.getLabel = function(value) {
    return $(this.obj_label).html();
  };

  Page.prototype.start = function(renderizer) {
    var _ref;
    if ((_ref = this.specificRender) != null) {
      _ref.beforeStartChildren(this, renderizer);
    }
    return Page.__super__.start.call(this, renderizer);
  };

  return Page;

})(Form);

Pager = (function(_super) {
  __extends(Pager, _super);

  function Pager(attribs) {
    this.attribs = attribs;
    Pager.__super__.constructor.call(this, this.attribs);
  }

  Pager.prototype.start = function(renderizer) {
    var _ref;
    if ((_ref = this.specificRender) != null) {
      _ref.beforeStartChildren(this, renderizer);
    }
    return Pager.__super__.start.call(this, renderizer);
  };

  Pager.prototype.getContainerStyle = function() {
    return 'Page';
  };

  return Pager;

})(Form);

Margin = (function(_super) {
  __extends(Margin, _super);

  function Margin() {
    return Margin.__super__.constructor.apply(this, arguments);
  }

  return Margin;

})(Element);

VerticalMenu = (function(_super) {
  __extends(VerticalMenu, _super);

  function VerticalMenu() {
    return VerticalMenu.__super__.constructor.apply(this, arguments);
  }

  return VerticalMenu;

})(Element);

HorizontalTitle = (function(_super) {
  __extends(HorizontalTitle, _super);

  function HorizontalTitle() {
    return HorizontalTitle.__super__.constructor.apply(this, arguments);
  }

  HorizontalTitle.prototype.createComponent = function(renderizer) {
    var ret;
    return ret = renderizer.createElement(this);
  };

  HorizontalTitle.prototype.setValue = function(value) {
    return $(this.component).html(value);
  };

  return HorizontalTitle;

})(Element);

InstanceManager = (function() {
  function InstanceManager() {}

  InstanceManager.getInstance = function(className, arg1, arg2, arg3) {
    eval('ret = new className(arg1,arg2,arg3)');
    return ret;
  };

  InstanceManager.getInstanceOrDefault = function(className, defaultClass, arg1, arg2, arg3) {
    var extClassName;
    if (defaultClass == null) {
      defaultClass = 'default';
    }
    extClassName = className + 'Ext';
    eval('if(typeof(' + extClassName + ')=="function"){ ret = new ' + extClassName + '(arg1,arg2,arg3); }else if(typeof(' + className + ')=="function"){ ret = new ' + className + '(arg1,arg2,arg3); }else{ ret = new ' + defaultClass + '(arg1,arg2,arg3); } ');
    return ret;
  };

  return InstanceManager;

})();

RenderizerAbstract = (function() {
  function RenderizerAbstract(parent) {
    var self;
    this.parent = parent;
    this.clear();
    self = this;
    $.fn.element = function(i) {
      var id;
      id = this.get(0).id;
      return self.elements[id];
    };
  }

  RenderizerAbstract.prototype.addElement = function(name, instance) {
    var _ref;
    this.elements[name] = instance;
    if (instance.parent) {
      if ((_ref = this.elements[instance.parent]) != null) {
        _ref.addElement(instance);
      }
    }
    if (!instance.parent) {
      return this.roots.push(instance);
    }
  };

  RenderizerAbstract.prototype.addContainer = function(instance) {
    return this.containers.push(instance);
  };

  RenderizerAbstract.prototype.getElement = function(name) {
    return this.elements[name];
  };

  RenderizerAbstract.prototype.getElements = function() {
    return this.elements;
  };

  RenderizerAbstract.prototype.clear = function() {
    this.elements = {};
    this.roots = [];
    this.containers = [];
    return this;
  };

  RenderizerAbstract.prototype.render = function() {
    var root, _i, _len, _ref, _results;
    _ref = this.roots;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      root = _ref[_i];
      _results.push(root.render($('body'), this));
    }
    return _results;
  };

  RenderizerAbstract.prototype.createElement = function(def) {
    var specificRender;
    specificRender = InstanceManager.getInstanceOrDefault(def.type + 'Render', 'SpecificElementRender', def);
    return specificRender.createElement(def, this);
  };

  RenderizerAbstract.prototype.startElements = function() {
    var root, _i, _j, _len, _len1, _ref, _ref1, _results;
    _ref = this.roots;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      root = _ref[_i];
      root.start(this);
    }
    _ref1 = this.roots;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      root = _ref1[_j];
      _results.push(root.afterAllStart(this));
    }
    return _results;
  };

  RenderizerAbstract.prototype.realignElements = function() {
    var root, _i, _j, _len, _len1, _ref, _ref1, _results;
    _ref = this.roots;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      root = _ref[_i];
      root.realign(this);
    }
    this.defineContainerWidths();
    _ref1 = this.roots;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      root = _ref1[_j];
      _results.push(root.afterAllRealign(this));
    }
    return _results;
  };

  RenderizerAbstract.prototype.renderDependences = function() {
    var root, _i, _len, _ref, _results;
    _ref = this.roots;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      root = _ref[_i];
      _results.push(root.renderDependences($('body'), this));
    }
    return _results;
  };

  RenderizerAbstract.prototype.addCssFile = function(cssFileName) {
    cssFileName = '/js/zRender/css/' + cssFileName;
    return $('head').append('<link rel="stylesheet" href="' + cssFileName + '" type="text/css" />');
  };

  RenderizerAbstract.prototype.configureFontSizes = function() {};

  RenderizerAbstract.prototype.defineContainerWidths = function(createCommand) {
    var elements, instance, _base, _i, _len, _ref;
    elements = 0;
    _ref = this.containers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      instance = _ref[_i];
      if (typeof (_base = instance.specificRender).markElements === "function") {
        _base.markElements(instance, this);
      }
      if (instance.parent) {
        instance.parent.specificRender.defineContainerWidths(instance.parent, this);
      } else {
        instance.setWidth('100%');
      }
    }
    return console.log('RENDER_ABSTRACT: Larguras de containers definidas');
  };

  RenderizerAbstract.prototype.defineContainerHeights = function(createCommand) {};

  return RenderizerAbstract;

})();

SenderAbstract = (function() {
  function SenderAbstract(parent) {
    this.parent = parent;
    console.log('sender iniciado');
  }

  return SenderAbstract;

})();


/*
De acordo com a constante de conforto humano de cada elemento, garante que haverá
espaço suficiente para exibir o conteúdo de cada elemento.
Quando aplicado em Lines justificadas, pode causar overflow dos campos, o que resulta
em sua queda.
 */

HumanConfortableSizesAlgorithm = (function() {
  function HumanConfortableSizesAlgorithm() {}

  HumanConfortableSizesAlgorithm.prototype.run = function(def, renderizer, children, trySize) {
    var child, element, size, _i, _len, _ref, _results;
    if (trySize == null) {
      trySize = null;
    }
    size = 0;
    _ref = $('#' + def.id).children();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      element = $(child).element();
      element.equalizeRects();
      if (trySize) {
        if (element.getHumanConfort() < element.getHumanConfortLimit()) {
          $(child).element().setWidth(trySize);
        }
      }
      if (element.getHumanConfort() < element.getHumanConfortLimit()) {
        _results.push($(child).element().ajustHumanConfortWidth());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return HumanConfortableSizesAlgorithm;

})();


/* Algoritmo de alinhamento para linhas justificadas.
 */

JustifyFieldsInBarAlgoritm = (function() {
  function JustifyFieldsInBarAlgoritm() {
    this.processContainers = false;
  }


  /*
  Faz com que todos os elementos de uma Linha contenham tamanhos proporcionais de modo que todo o espaço util seja
  ocupado
   */

  JustifyFieldsInBarAlgoritm.prototype.run = function(def, specificRender, renderizer, children, screenElement, methodToGetSizeScreen, percentual) {
    this.def = def;
    this.renderizer = renderizer;
    this.screenElement = screenElement;
    this.methodToGetSizeScreen = methodToGetSizeScreen;
    this.percentual = percentual;
    this._initialize();
    this._calculateSizeScreen();
    this._removeMarginsOfScreenSize();
    this._defineNewWidths();
    specificRender.lastElement = this.lastElements;
    return specificRender.elements = this.elements;
  };

  JustifyFieldsInBarAlgoritm.prototype._initialize = function() {
    this.componentsSizes = 0;
    this.padding = 0;
    this.count = 0;
    this.usedSize = 0;
    this.expectedUsedSize = 0;
    this.renderCount = 0;
    this.lastElement = null;
    return this.elements = [];
  };

  JustifyFieldsInBarAlgoritm.prototype._calculateSizeScreen = function() {
    if (this.methodToGetSizeScreen === 'width') {
      return this.sizeScreen = Math.round(this.screenElement.getRealWidth() * this.percentual / 100);
    } else {
      return this.sizeScreen = Math.round(this.screenElement.getRight() * this.percentual / 100);
    }
  };

  JustifyFieldsInBarAlgoritm.prototype._removeMarginsOfScreenSize = function() {
    var margin, windowWidth;
    if (this.def.children.length > 0) {
      margin = this.def.children[0].getLeft() - this.def.getParent().getLeft();
      this.sizeScreen -= margin * 2;
    }
    windowWidth = $(window).width();
    if (windowWidth < 300) {
      return this.sizeScreen -= margin * 4;
    } else if (windowWidth < 500) {
      return this.sizeScreen -= margin * 3;
    } else if (windowWidth < 700) {
      return this.sizeScreen -= margin * 2;
    } else if (windowWidth < 900) {
      return this.sizeScreen -= margin;
    }
  };

  JustifyFieldsInBarAlgoritm.prototype._setNewSize = function(element) {
    this.newSize = this.sizeScreen;
    return element.setWidth(this.newSize);
  };

  JustifyFieldsInBarAlgoritm.prototype._defineNewWidths = function() {
    var child, element, _i, _len, _ref, _results;
    _ref = $('#' + this.def.id).children();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      element = this.renderizer.elements[child.id];
      this.renderCount++;
      if (!element.isContainer() || this.processContainers) {
        this._setNewSize(element);
        this.lastElement = element;
        _results.push(this.elements.push(element));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return JustifyFieldsInBarAlgoritm;

})();


/* Algoritmo de alinhamento para linhas justificadas.
 */

JustifyFieldsInLineAlgoritm = (function() {
  function JustifyFieldsInLineAlgoritm() {
    this.processContainers = false;
  }


  /*
  Faz com que todos os elementos de uma Linha contenham tamanhos proporcionais de modo que todo o espaço util seja
  ocupado
   */

  JustifyFieldsInLineAlgoritm.prototype.run = function(def, specificRender, renderizer, children, screenElement, methodToGetSizeScreen, percentual) {
    this.def = def;
    this.renderizer = renderizer;
    this.screenElement = screenElement;
    this.methodToGetSizeScreen = methodToGetSizeScreen;
    this.percentual = percentual;
    this._initialize();
    this._calculateComponentSizes('left');
    this._calculateSizeScreen();
    this._removeMarginsOfScreenSize();
    this._defineNewWidths();
    specificRender.lastElement = this.lastElements;
    return specificRender.elements = this.elements;
  };

  JustifyFieldsInLineAlgoritm.prototype._initialize = function() {
    this.componentsSizes = 0;
    this.padding = 0;
    this.count = 0;
    this.usedSize = 0;
    this.expectedUsedSize = 0;
    this.renderCount = 0;
    this.lastElement = null;
    return this.elements = [];
  };

  JustifyFieldsInLineAlgoritm.prototype._calculateComponentSizes = function(addClass) {
    var child, _i, _len, _ref, _results;
    _ref = $('#' + this.def.id).children();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      this.componentsSizes += $(child).element().getSizeInScreen() * 1;
      _results.push($(child).addClass(addClass));
    }
    return _results;
  };

  JustifyFieldsInLineAlgoritm.prototype._calculateSizeScreen = function() {
    if (this.methodToGetSizeScreen === 'width') {
      return this.sizeScreen = Math.round(this.screenElement.getRealWidth() * this.percentual / 100);
    } else {
      return this.sizeScreen = Math.round(this.screenElement.getRight() * this.percentual / 100);
    }
  };

  JustifyFieldsInLineAlgoritm.prototype._removeMarginsOfScreenSize = function() {
    var margin, windowWidth;
    if (this.def.children.length > 0) {
      margin = this.def.children[0].getLeft() - this.def.getParent().getLeft();
      this.sizeScreen -= margin * 2;
    }
    windowWidth = $(window).width() * 1;
    if (windowWidth < 300) {
      return this.sizeScreen -= margin * 4;
    } else if (windowWidth < 500) {
      return this.sizeScreen -= margin * 3;
    } else if (windowWidth < 700) {
      return this.sizeScreen -= margin * 2;
    } else if (windowWidth < 1000) {
      return this.sizeScreen -= margin * 0.5;
    } else if (windowWidth < 1200) {
      return this.sizeScreen -= margin * 0.9;
    }
  };

  JustifyFieldsInLineAlgoritm.prototype._getJustifyWidth = function(element, children, sizeScreen, componentsSizes, usedSize, renderCount) {
    return Math.round(element.getSizeInScreen() * sizeScreen / componentsSizes);
  };

  JustifyFieldsInLineAlgoritm.prototype._calculateUsedSize = function(element) {
    if (this.lastElement) {
      this.usedSize += element.getRight() - this.lastElement.getRight();
    } else {
      this.usedSize += element.getRealWidth();
    }
    return this.expectedUsedSize += this.newSize;
  };

  JustifyFieldsInLineAlgoritm.prototype._distributeDifferencesInUsedSize = function(element) {
    var diff;
    if (this.usedSize > this.expectedUsedSize) {
      diff = this.usedSize - this.expectedUsedSize;
      if (this.lastElement) {
        this.lastElement.setWidth(this.lastElement.getRealWidth() - (diff / 2));
        element.setWidth(this.newSize - (diff / 2));
      } else {
        element.setWidth(this.newSize - diff);
      }
      return this.usedSize = this.expectedUsedSize;
    }
  };

  JustifyFieldsInLineAlgoritm.prototype._tryPreventOverflow = function(element) {
    var obj, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
    if (this.renderCount === this.children && this.usedSize < this.sizeScreen) {
      if (this.lastElement && this.lastElement.getTop() !== element.getTop()) {
        element.decWidth(1);
        if (this.lastElement.getTop() !== element.getTop()) {
          _ref = this.elements;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            obj = _ref[_i];
            obj.decWidth(1);
          }
        }
        if (this.lastElement.getTop() !== element.getTop()) {
          element.decWidth(1);
        }
        if (this.lastElement.getTop() !== element.getTop()) {
          _ref1 = this.elements;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            obj = _ref1[_j];
            obj.decWidth(1);
          }
        }
        if (this.lastElement.getTop() !== element.getTop()) {
          element.decWidth(1);
        }
        if (this.lastElement.getTop() !== element.getTop()) {
          _ref2 = this.elements;
          _results = [];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            obj = _ref2[_k];
            _results.push(obj.decWidth(1));
          }
          return _results;
        }
      }
    }
  };

  JustifyFieldsInLineAlgoritm.prototype._setNewSize = function(element) {
    this.newSize = this._getJustifyWidth(element, this.children, this.sizeScreen, this.componentsSizes, this.usedSize, this.renderCount);
    return element.setWidth(this.newSize);
  };

  JustifyFieldsInLineAlgoritm.prototype._defineNewWidths = function() {
    var child, element, _i, _len, _ref, _results;
    _ref = $('#' + this.def.id).children();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      element = this.renderizer.elements[child.id];
      this.renderCount++;
      if (!element.isContainer() || this.processContainers) {
        this._setNewSize(element);
        this._calculateUsedSize(element);
        this._distributeDifferencesInUsedSize(element);
        this._tryPreventOverflow(element);
        this.lastElement = element;
        _results.push(this.elements.push(element));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return JustifyFieldsInLineAlgoritm;

})();

SpecificElementRender = (function() {
  function SpecificElementRender(def) {}

  SpecificElementRender.prototype.createElement = function(def, renderizer) {
    return document.createElement('div');
  };

  SpecificElementRender.prototype.startElement = function(def) {};

  SpecificElementRender.prototype.beforeStartChildren = function(def, renderizer) {};

  SpecificElementRender.prototype.afterStartChildren = function(def, renderizer) {};

  SpecificElementRender.prototype.afterAllStart = function(def, renderizer) {};

  return SpecificElementRender;

})();

TextFieldRender = (function(_super) {
  __extends(TextFieldRender, _super);

  function TextFieldRender() {
    return TextFieldRender.__super__.constructor.apply(this, arguments);
  }

  TextFieldRender.prototype.createElement = function(def, renderizer) {
    var ret;
    ret = document.createElement('div');
    def.obj_label = document.createElement('div');
    def.obj_field = document.createElement('input');
    def.obj_field.type = 'text';
    def.setLabel(def.label);
    def.setValue(def.value);
    $(def.label).addClass('label');
    $(def.obj_field).addClass('input');
    $(ret).append(def.obj_label);
    $(ret).append(def.obj_field);
    $(ret).addClass('field');
    $(def.obj_field).width($(def.obj_label).width() + 2);
    def.specificRender = this;
    return ret;
  };

  TextFieldRender.prototype.ajustRight = function(def, maxRight, extra) {
    var diffW, right, width;
    if (!this.conta) {
      this.conta = 0;
    }
    this.conta++;
    console.log('ajustRight');
    right = def.getRight();
    width = def.getRealWidth();
    diffW = maxRight - right;
    if (maxRight > right) {
      def.setWidth(width + diffW);
    }
    return this;
  };

  TextFieldRender.prototype.realignElement = function(def, renderizer) {
    return def.setWidth(10);
  };

  return TextFieldRender;

})(SpecificElementRender);

FormRender = (function(_super) {
  __extends(FormRender, _super);

  function FormRender() {
    return FormRender.__super__.constructor.apply(this, arguments);
  }

  FormRender.prototype.createElement = function(def, renderizer) {
    var ret;
    ret = document.createElement('div');
    $(ret).addClass('form');
    def.specificRender = this;
    renderizer.addContainer(def);
    return ret;
  };

  FormRender.prototype.beforeStartChildren = function(def, renderizer) {
    if (def.width) {
      return def.setWidth(def.width);
    }
  };

  FormRender.prototype.ajustRight = function(element, maxRight, extra) {
    return element.specificRender.ajustRight(element, maxRight, extra);
  };

  FormRender.prototype.startElement = function(def, renderizer) {
    var group, groupRenders, line, lineRenders, pager, pagerRenders, windowWidth, _i, _j, _k, _len, _len1, _len2, _results;
    windowWidth = $(window).width();
    if (windowWidth < 300) {
      $('body').css('font-size', 7);
    } else if (windowWidth < 500) {
      $('body').css('font-size', 8);
    } else if (windowWidth < 700) {
      $('body').css('font-size', 9);
    } else if (windowWidth < 900) {
      $('body').css('font-size', 10);
    } else {
      $('body').css('font-size', 11);
    }
    lineRenders = def.getLineRenders();
    groupRenders = def.getGroupRenders();
    pagerRenders = def.getPagerRenders();
    for (_i = 0, _len = groupRenders.length; _i < _len; _i++) {
      group = groupRenders[_i];
      if (typeof group.afterFormStart === "function") {
        group.afterFormStart();
      }
    }
    for (_j = 0, _len1 = pagerRenders.length; _j < _len1; _j++) {
      pager = pagerRenders[_j];
      if (typeof pager.afterFormStart === "function") {
        pager.afterFormStart();
      }
    }
    _results = [];
    for (_k = 0, _len2 = lineRenders.length; _k < _len2; _k++) {
      line = lineRenders[_k];
      _results.push(line.afterFormStart());
    }
    return _results;
  };

  FormRender.prototype.realignElement = function(def, renderizer) {
    $(ret).removeClass('form');
    def.firstSize = $('body').width();
    return $(def.element).width('100%');
  };

  FormRender.prototype.afterRealignChildren = function(def, renderizer) {};

  FormRender.prototype.afterRealignChildren = function(def, renderizer) {};

  FormRender.prototype.afterAllRealign = function(def, renderizer) {
    this.startElement(def, renderizer);
    return this.afterAllStart(def, renderizer);
  };

  FormRender.prototype.markElements = function(def, renderizer) {
    var child, count, last, _i, _len, _ref, _results;
    last = def.children.length;
    count = 0;
    _ref = def.children;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      count++;
      if (count === 1) {
        $(child.component).attr("first", child.parent.type);
      } else if (count === last) {
        $(child.component).attr("last", child.parent.type);
      } else {
        $(child.component).attr("mid", child.parent.type);
      }
      _results.push($(child.component).attr("in", child.parent.getContainerStyle()));
    }
    return _results;
  };

  FormRender.prototype.getWidth = function(element, children, sizeScreen, componentsSizes, usedSize, renderCount) {
    this.lastElement = element;
    if (renderCount === children) {
      return sizeScreen - usedSize;
    }
    return Math.round((element.size * sizeScreen / componentsSizes) - 1);
  };

  FormRender.prototype.defineContainerWidths = function(def, renderizer) {
    var group, groupRenders, line, lineRenders, pager, pagerRenders, _i, _j, _k, _len, _len1, _len2, _results;
    lineRenders = def.getLineRenders();
    groupRenders = def.getGroupRenders();
    pagerRenders = def.getPagerRenders();
    for (_i = 0, _len = groupRenders.length; _i < _len; _i++) {
      group = groupRenders[_i];
      group.element.setWidth("94.42%");
      group.element.setInternalWidth(group.element.getRealWidth());
    }
    for (_j = 0, _len1 = pagerRenders.length; _j < _len1; _j++) {
      pager = pagerRenders[_j];
      pager.element.setWidth("94.42%");
      pager.element.setInternalWidth(pager.element.getRealWidth());
    }
    _results = [];
    for (_k = 0, _len2 = lineRenders.length; _k < _len2; _k++) {
      line = lineRenders[_k];
      line.element.setWidth("100%");
      _results.push(line.element.setInternalWidth(line.element.getRealWidth()));
    }
    return _results;
  };

  return FormRender;

})(SpecificElementRender);

BarRender = (function(_super) {
  __extends(BarRender, _super);

  function BarRender() {
    return BarRender.__super__.constructor.apply(this, arguments);
  }

  BarRender.prototype.createElement = function(def, renderizer) {
    var ret;
    ret = document.createElement('div');
    $(ret).addClass('bar');
    if ((def.margin != null) > 0) {
      $(def.component).css('padding-left', def.margin);
    }
    def.specificRender = this;
    renderizer.addContainer(def);
    this.element = def;
    this.component = ret;
    return ret;
  };

  BarRender.prototype.afterFormStart = function() {};

  BarRender.prototype.startElement = function(def, renderizer) {
    this._initializeAlgorithms();
    BarRender.__super__.startElement.call(this, def, renderizer);
    this.elements = [];
    def.parent.addBarRender(this);
    if (def.margin > -1) {
      $(def.component).css('padding-left', def.margin + 'px');
    }
    this._alignElements(def, renderizer);
    this.beforeFormStart = function() {
      return this.processSameRight(def, renderizer, children);
    };
    return this;
  };

  BarRender.prototype._initializeAlgorithms = function() {
    this._algorithmHumanConfortableSizes = new HumanConfortableSizesAlgorithm();
    return this._algorithmJustify = new JustifyFieldsInBarAlgoritm();
  };

  BarRender.prototype._alignElements = function(def, renderizer) {
    var children;
    children = $('#' + def.id).children().length;
    if (def.align === 'justify') {
      return this._justify(def, this, renderizer, children, def.getParent(), 'width', 100);
    } else if (def.align === 'left') {
      return this._renderLeft(def, renderizer, children);
    } else if (def.align === 'pseudoJustify') {
      this._renderLeft(def, renderizer, children);
      return this.afterFormStart = function() {
        return this._justify(def, this, renderizer, children, $('#' + def.justitfyElement).element(), 'right', 100);
      };
    } else if (def.align === 'pseudoJustifyHalf') {
      this._renderLeft(def, renderizer, children);
      return this.afterFormStart = function() {
        return this._justify(def, this, renderizer, children, $('#' + def.justitfyElement).element(), 'right', 50);
      };
    } else {
      return this.analizeHumanComfortableSize(def, renderizer, children);
    }
  };

  BarRender.prototype._justify = function(def, specificRender, renderizer, children, screenElement, methodToGetSizeScreen, percentual) {
    return this._algorithmJustify.run(def, specificRender, renderizer, children, screenElement, methodToGetSizeScreen, percentual);
  };

  BarRender.prototype._renderLeft = function(def, renderizer, children) {
    return this.analizeHumanComfortableSize(def, renderizer, children);
  };

  BarRender.prototype.analizeHumanComfortableSize = function(def, renderizer, children, trySize) {
    if (trySize == null) {
      trySize = null;
    }
    return this._algorithmHumanConfortableSizes.run(def, renderizer, children, trySize);
  };

  BarRender.prototype.processSameRight = function(def, renderizer, children) {
    var child, diff, element, extra, oldW, same, _i, _len, _ref, _results;
    _ref = $('#' + def.id).children();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      element = $(child).element();
      same = element.getSameRightElement();
      if (same) {
        oldW = element.getWidth();
        diff = same.getRight() - element.getRight();
        element.setWidth(element.getRealWidth() + diff);
        extra = element.getExtraWidth();
        diff = same.getRight() - element.getRight() - extra;
        element.setWidth(element.getRealWidth() + diff);
        _results.push(this.analizeHumanComfortableSize(def, renderizer, children, oldW));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  BarRender.prototype.processGroups = function(def, renderizer) {};

  BarRender.prototype.defineContainerWidths = function(def, renderizer) {
    var groupRenders;
    this._initializeAlgorithms();
    this._algorithmJustify.processContainers = true;
    groupRenders = def.getGroupRenders();
    return this._justify(def, this, renderizer, groupRenders.length, def.parent, 'width', 100);
  };

  return BarRender;

})(FormRender);

GroupRender = (function(_super) {
  __extends(GroupRender, _super);

  function GroupRender() {
    return GroupRender.__super__.constructor.apply(this, arguments);
  }

  GroupRender.prototype.createElement = function(def, renderizer) {
    var ret;
    ret = document.createElement('fieldset');
    def.obj_label = document.createElement('legend');
    def.component = ret;
    $(ret).append(def.obj_label);
    if (def.align && def.align === 'left') {
      $(ret).addClass('groupLeft');
    } else {
      $(ret).addClass('group');
    }
    if (def.label) {
      def.setLabel(def.label);
    }
    def.getParent().addGroupRender(this);
    def.specificRender = this;
    this.element = def;
    this.component = ret;
    renderizer.addContainer(def);
    return ret;
  };

  GroupRender.prototype.beforeStartChildren = function(def, renderizer) {};

  GroupRender.prototype.defineContainerWidths = function(def, renderizer) {};

  GroupRender.prototype.ajustRight = function(element, maxRight, extra) {};

  return GroupRender;

})(FormRender);

LineRender = (function(_super) {
  __extends(LineRender, _super);

  function LineRender() {
    return LineRender.__super__.constructor.apply(this, arguments);
  }

  LineRender.prototype.createElement = function(def, renderizer) {
    var ret;
    ret = document.createElement('div');
    $(ret).addClass('line');
    if ((def.margin != null) > 0) {
      $(def.component).css('padding-left', def.margin);
    }
    $(ret).css('width', '100%');
    def.specificRender = this;
    renderizer.addContainer(def);
    def.parent.addLineRender(this);
    this.element = def;
    this.component = ret;
    return ret;
  };

  LineRender.prototype.afterFormStart = function() {};

  LineRender.prototype.startElement = function(def, renderizer) {
    this._initializeAlgorithms();
    LineRender.__super__.startElement.call(this, def, renderizer);
    this.elements = [];
    def.parent.addLineRender(this);
    if (def.margin > -1) {
      $(def.component).css('padding-left', def.margin + 'px');
    }
    this._alignElements(def, renderizer);
    this.beforeFormStart = function() {
      return this.processSameRight(def, renderizer, children);
    };
    return this;
  };

  LineRender.prototype._initializeAlgorithms = function() {
    this._algorithmJustify = new JustifyFieldsInLineAlgoritm();
    return this._algorithmHumanConfortableSizes = new HumanConfortableSizesAlgorithm();
  };

  LineRender.prototype._alignElements = function(def, renderizer) {
    var children;
    children = $('#' + def.id).children().length;
    if (def.align === 'justify') {
      return this._justify(def, this, renderizer, children, def.getParent(), 'width', 100);
    } else if (def.align === 'left') {
      return this._renderLeft(def, renderizer, children);
    } else if (def.align === 'pseudoJustify') {
      this._renderLeft(def, renderizer, children);
      return this.afterFormStart = function() {
        return this._justify(def, this, renderizer, children, $('#' + def.justitfyElement).element(), 'right', 100);
      };
    } else if (def.align === 'pseudoJustifyHalf') {
      this._renderLeft(def, renderizer, children);
      return this.afterFormStart = function() {
        return this._justify(def, this, renderizer, children, $('#' + def.justitfyElement).element(), 'right', 50);
      };
    } else {
      return this.analizeHumanComfortableSize(def, renderizer, children);
    }
  };

  LineRender.prototype._justify = function(def, specificRender, renderizer, children, screenElement, methodToGetSizeScreen, percentual) {
    return this._algorithmJustify.run(def, specificRender, renderizer, children, screenElement, methodToGetSizeScreen, percentual);
  };

  LineRender.prototype._renderLeft = function(def, renderizer, children) {
    return this.analizeHumanComfortableSize(def, renderizer, children);
  };

  LineRender.prototype.analizeHumanComfortableSize = function(def, renderizer, children, trySize) {
    if (trySize == null) {
      trySize = null;
    }
    return this._algorithmHumanConfortableSizes.run(def, renderizer, children, trySize);
  };

  LineRender.prototype.processSameRight = function(def, renderizer, children) {
    var child, diff, element, extra, oldW, same, _i, _len, _ref, _results;
    _ref = $('#' + def.id).children();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      element = $(child).element();
      same = element.getSameRightElement();
      if (same) {
        oldW = element.getWidth();
        diff = same.getRight() - element.getRight();
        element.setWidth(element.getRealWidth() + diff);
        extra = element.getExtraWidth();
        diff = same.getRight() - element.getRight() - extra;
        element.setWidth(element.getRealWidth() + diff);
        _results.push(this.analizeHumanComfortableSize(def, renderizer, children, oldW));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  LineRender.prototype.processGroups = function(def, renderizer) {};

  LineRender.prototype.defineContainerWidths = function(def, renderizer) {
    var groupRenders;
    this._initializeAlgorithms();
    this._algorithmJustify.processContainers = true;
    groupRenders = def.getGroupRenders();
    return this._justify(def, this, renderizer, groupRenders.length, def.parent, 'width', 100);
  };

  return LineRender;

})(FormRender);

PageRender = (function(_super) {
  __extends(PageRender, _super);

  function PageRender() {
    return PageRender.__super__.constructor.apply(this, arguments);
  }

  PageRender.prototype.createElement = function(def, renderizer) {
    var ret;
    ret = document.createElement('div');
    def.specificRender = this;
    this.element = def;
    this.component = ret;
    $(this.component).addClass('page');
    def.parent.specificRender.addPage(def, renderizer);
    renderizer.addContainer(def);
    return ret;
  };

  PageRender.prototype.beforeStartChildren = function(def, renderizer) {
    if (def.width) {
      return def.setWidth(def.width);
    }
  };

  PageRender.prototype.defineContainerWidths = function(def, renderizer) {
    var group, groupRenders, groups, margin, newSize, pager, pagerRenders, pagers, _i, _j, _len, _len1, _results;
    groupRenders = def.getGroupRenders();
    pagerRenders = def.getPagerRenders();
    groups = groupRenders.length;
    for (_i = 0, _len = groupRenders.length; _i < _len; _i++) {
      group = groupRenders[_i];
      group.element.setWidth(100 + "%");
      margin = group.element.getLeft() - group.element.parent.getLeft();
      newSize = group.element.getRealWidth() - margin;
      group.element.setWidth(newSize);
    }
    pagers = pagerRenders.length;
    _results = [];
    for (_j = 0, _len1 = pagerRenders.length; _j < _len1; _j++) {
      pager = pagerRenders[_j];
      _results.push(pager.element.setWidth(94.42 + "%"));
    }
    return _results;
  };

  return PageRender;

})(FormRender);

PagerRender = (function(_super) {
  __extends(PagerRender, _super);

  function PagerRender() {
    return PagerRender.__super__.constructor.apply(this, arguments);
  }

  PagerRender.prototype.createElement = function(def, renderizer) {
    var ret;
    ret = document.createElement('div');
    def.obj_pager = document.createElement('ul');
    def.component = ret;
    $(ret).append(def.obj_pager);
    $(ret).addClass('pager');
    def.getParent().addPagerRender(this);
    def.specificRender = this;
    renderizer.addContainer(def);
    this.element = def;
    return ret;
  };

  PagerRender.prototype.addPage = function(def, renderizer) {
    var link, tabButton;
    tabButton = document.createElement('li');
    link = document.createElement('a');
    $(link).attr('href', '#' + def.id).html(def.label);
    $(tabButton).append(link);
    return $(this.element.obj_pager).append(tabButton);
  };

  PagerRender.prototype.defineContainerWidths = function(def, renderizer) {
    var page, _i, _len, _ref, _results;
    _ref = this.element.children;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      page = _ref[_i];
      _results.push(page.setWidth('100%'));
    }
    return _results;
  };

  return PagerRender;

})(FormRender);

MarginRender = (function(_super) {
  __extends(MarginRender, _super);

  function MarginRender() {
    return MarginRender.__super__.constructor.apply(this, arguments);
  }

  MarginRender.prototype.createElement = function(def, renderizer) {
    var ret;
    ret = document.createElement('div');
    def.component = ret;
    $(ret).width(def.width);
    return ret;
  };

  return MarginRender;

})(SpecificElementRender);

HorizontalTitleRender = (function(_super) {
  __extends(HorizontalTitleRender, _super);

  function HorizontalTitleRender() {
    return HorizontalTitleRender.__super__.constructor.apply(this, arguments);
  }

  HorizontalTitleRender.prototype.createElement = function(def, renderizer) {
    return document.createElement('h1');
  };

  return HorizontalTitleRender;

})(SpecificElementRender);
